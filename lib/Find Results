Searching 342 files for "[ \t]+\n" (regex)

/Users/andris/Projects/mailparser/lib/datetime.js:
    1: /* 
    2:  * More info at: http://phpjs.org
    3:  * 
    4:  * This is version: 3.18
    5   * php.js is copyright 2010 Kevin van Zonneveld.
    6:  * 
    7:  * Portions copyright Brett Zamir (http://brett-zamir.me), Kevin van Zonneveld
    8   * (http://kevin.vanzonneveld.net), Onno Marsman, Theriault, Michael White
    9   * (http://getsprink.com), Waldo Malqui Silva, Paulo Freitas, Jonas Raoni
   ..
   90   * (http://www.brantmessenger.com/), Matt Bradley, Luis Salazar
   91   * (http://www.freaky-media.com/), Tim de Koning, taith, Rick Waldron, Mick@el
   92:  * 
   93:  * Dual licensed under the MIT (MIT-LICENSE.txt)
   94   * and GPL (GPL-LICENSE.txt) licenses.
   95:  * 
   96:  * Permission is hereby granted, free of charge, to any person obtaining a
   97   * copy of this software and associated documentation files (the
   98   * "Software"), to deal in the Software without restriction, including
   ..
  101   * permit persons to whom the Software is furnished to do so, subject to
  102   * the following conditions:
  103:  * 
  104:  * The above copyright notice and this permission notice shall be included
  105   * in all copies or substantial portions of the Software.
  106:  * 
  107:  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  108   * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  109   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  ...
  112   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  113   * OTHER DEALINGS IN THE SOFTWARE.
  114:  */ 
  115: this.strtotime = function(str, now) {
  116      // http://kevin.vanzonneveld.net
  117      // +   original by: Caio Ariede (http://caioariede.com)
  ...
  131      // *     example 4: strtotime('2009-05-04 08:30:00');
  132      // *     returns 4: 1241418600
  133:  
  134:     var i, match, s, strTmp = '', parse = '';
  135  
  136      strTmp = str;

/Users/andris/Projects/mailparser/lib/mailparser.js:
   27  /**
   28   * <p>Creates instance of MailParser which in turn extends Stream</p>
   29:  * 
   30:  * <p>Options object has the following properties:</p>
   31:  * 
   32:  * <ul>
   33   *   <li><b>debug</b> - if set to true print all incoming lines to decodeq</li>
   34   *   <li><b>streamAttachments</b> - if set to true, stream attachments instead of including them</li>
   ..
   37   *   <li><b>showAttachmentLinks</b></li> - if set to true, show inlined attachment links
   38   * </ul>
   39:  * 
   40:  * @constructor
   41   * @param {Object} [options] Optional options object
   42   */
   43  function MailParser(options){
   44:     
   45:     // Make MailParser a Stream object
   46      Stream.call(this);
   47      this.writable = true;
   48:     
   49:     /** 
   50:      * Options object
   51       * @public  */ this.options = options || {};
   52:      
   53:     /** 
   54:      * Indicates current state the parser is in
   55       * @private */ this._state         = STATES.header;
   56:     
   57:     /** 
   58:      * The remaining data from the previos chunk which is waiting to be processed
   59       * @private */ this._remainder     = "";
   60:     
   61:     /** 
   62:      * The complete tree structure of the e-mail
   63       * @public  */ this.mimeTree       = this._createMimeNode();
   64:     
   65:     /** 
   66:      * Current node of the multipart mime tree that is being processed
   67       * @private */ this._currentNode   = this.mimeTree;
   68  
   69      // default values for the root node
   70      this._currentNode.priority = "normal";
   71:      
   72:     /** 
   73:      * An object of already used attachment filenames
   74       * @private */ this._fileNames     = {};
   75:      
   76:     /** 
   77:      * An array of multipart nodes
   78       * @private */ this._multipartTree = [];
   79:      
   80:      
   81:     /**
   82       * This is the final mail structure object that is returned to the client
   83       * @public  */ this.mailData       = {};
   84:      
   85:     /** 
   86:      * Line counter for debugging
   87       * @private */ this._lineCounter   = 0;
   88:      
   89:     /** 
   90:      * Did the last chunk end with \r
   91       * @private */ this._lineFeed      = false;
   92:    
   93:    /** 
   94:      * Is the "headers" event already emitted
   95       * @private */ this._headersSent   = false;
   96  }
   ..
  100  /**
  101   * <p>Writes a value to the MailParser stream<p>
  102:  * 
  103:  * @param {Buffer|String} chunk The data to be written to the MailParser stream
  104   * @param {String} [encoding] The encoding to be used when "chunk" is a string
  105   * @returns {Boolean} Returns true
  ...
  113  
  114  /**
  115:  * <p>Terminates the MailParser stream</p> 
  116:  * 
  117:  * <p>If "chunk" is set, writes it to the Stream before terminating.</p>
  118:  * 
  119:  * @param {Buffer|String} chunk The data to be written to the MailParser stream
  120   * @param {String} [encoding] The encoding to be used when "chunk" is a string
  121   */
  ...
  162  /**
  163   * <p>Processes the data written to the MailParser stream</p>
  164:  * 
  165:  * <p>The data is split into lines and each line is processed individually. Last
  166   * line in the batch is preserved as a remainder since it is probably not a
  167   * complete line but just the beginning of it. The remainder is later prepended
  168   * to the next batch of data.</p>
  169:  * 
  170:  * @param {Boolean} [finalPart=false] if set to true indicates that this is the last part of the stream
  171   */
  172  MailParser.prototype._process = function(finalPart){
  173:     
  174:     finalPart = !!finalPart;
  175:     
  176:     var lines = this._remainder.split(/\r?\n|\r/),
  177          line, i, len;
  178:         
  179:     if(!finalPart){
  180          this._remainder = lines.pop();
  181:         // force line to 1MB chunks if needed 
  182:         if(this._remainder.length>1048576){
  183              this._remainder = this._remainder.replace(/(.{1048576}(?!\r?\n|\r))/g,"$&\n");
  184          }
  185      }
  186:     
  187:     for(i=0, len=lines.length; i < len; i++){
  188          line = lines[i];
  189:         
  190:         if(this.options.unescapeSMTP && line.substr(0,2)==".."){
  191              line = line.substr(1);
  192          }
  193:         
  194:         if(this.options.debug){
  195              console.log("LINE " + (++this._lineCounter) + " ("+this._state+"): "+line);
  196          }
  197:         
  198:         if(this._state == STATES.header){
  199              if(this._processStateHeader(line) === true){
  200                  continue;
  201              }
  202          }
  203:         
  204:         if(this._state == STATES.body){
  205:             
  206:             if(this._processStateBody(line) === true){
  207                  continue;
  208              }
  209:             
  210:         }
  211      }
  212:     
  213:     if(finalPart){
  214          if(this._state == STATES.header && this._remainder){
  215              this._processStateHeader(this._remainder);
  ...
  225          process.nextTick(this._processMimeTree.bind(this));
  226      }
  227:     
  228:     
  229: };
  230  
  231  /**
  232   * <p>Processes a line while in header state</p>
  233:  * 
  234:  * <p>If header state ends and body starts, detect if the contents is an attachment
  235   * and create a stream for it if needed</p>
  236:  * 
  237:  * @param {String} line The contents of a line to be processed
  238   * @returns {Boolean} If state changes to body retuns true
  239   */
  240  MailParser.prototype._processStateHeader = function(line){
  241:     var boundary, i, len, attachment, 
  242:         lastPos = this._currentNode.headers.length - 1,
  243          textContent = false, extension;
  244  
  ...
  252              this._headersSent = true;
  253          }
  254:         
  255:         this._state = STATES.body;
  256:         
  257:         // if there's unprocessed header data, do it now
  258          if(lastPos >= 0){
  259              this._processHeaderLine(lastPos);
  260          }
  261:         
  262:         // this is a very simple e-mail, no content type set
  263          if(!this._currentNode.parentNode && !this._currentNode.meta.contentType){
  264              this._currentNode.meta.contentType = "text/plain";
  265          }
  266:         
  267:         textContent = ["text/plain", "text/html"].indexOf(this._currentNode.meta.contentType || "") >= 0;
  268:         
  269:         // detect if this is an attachment or a text node (some agents use inline dispositions for text)
  270          if(textContent && (!this._currentNode.meta.contentDisposition || this._currentNode.meta.contentDisposition == "inline")){
  271              this._currentNode.attachment = false;
  272:         }else if((!textContent || ["attachment", "inline"].indexOf(this._currentNode.meta.contentDisposition)>=0) && 
  273:           !this._currentNode.meta.mimeMultipart){
  274              this._currentNode.attachment = true;
  275          }
  276:         
  277:         // handle attachment start
  278          if(this._currentNode.attachment){
  279:             
  280:             this._currentNode.checksum = crypto.createHash("md5");
  281:             
  282:             this._currentNode.meta.generatedFileName = this._generateFileName(this._currentNode.meta.fileName, this._currentNode.meta.contentType);
  283:             
  284:             extension = this._currentNode.meta.generatedFileName.split(".").pop().toLowerCase();
  285:             
  286:             // Update content-type if it's an application/octet-stream and file extension is available
  287              if(this._currentNode.meta.contentType == "application/octet-stream" && mime.lookup(extension)){
  288                  this._currentNode.meta.contentType = mime.lookup(extension);
  289              }
  290:             
  291:             attachment = this._currentNode.meta;
  292              if(this.options.streamAttachments){
  293                  if(this._currentNode.meta.transferEncoding == "base64"){
  ...
  299                  }
  300                  attachment.stream = this._currentNode.stream;
  301:                 
  302:                 this.emit("attachment", attachment);
  303              }else{
  304                  this._currentNode.content = undefined;
  305              }
  306          }
  307:         
  308:         return true;
  309      }
  310:     
  311:     // unfold header lines if needed
  312      if(line.match(/^\s+/) && lastPos>=0){
  313          this._currentNode.headers[lastPos] += " " + line.trim();
  ...
  319          }
  320      }
  321:     
  322:     return false;
  323  };
  324  
  325  /**
  326   * <p>Processes a line while in body state</p>
  327:  * 
  328:  * @param {String} line The contents of a line to be processed
  329   * @returns {Boolean} If body ends return true
  330   */
  ...
  332      var i, len, node,
  333          nodeReady = false;
  334:     
  335:     // Handle multipart boundaries
  336      if(line.substr(0, 2) == "--"){
  337          for(i=0, len = this._multipartTree.length; i<len; i++){
  338:             
  339:             // check if a new element block starts
  340              if(line == "--" + this._multipartTree[i].boundary){
  341:                 
  342:                 if(this._currentNode.content || this._currentNode.stream){
  343                      this._finalizeContents();
  344                  }
  345:                 
  346:                 node = this._createMimeNode(this._multipartTree[i].node);
  347                  this._multipartTree[i].node.childNodes.push(node);
  348                  this._currentNode = node;
  ...
  350                  nodeReady = true;
  351                  break;
  352:             }else 
  353:             // check if a multipart block ends
  354                if(line == "--" + this._multipartTree[i].boundary + "--"){
  355:                 
  356:                 if(this._currentNode.content || this._currentNode.stream){
  357                      this._finalizeContents();
  358                  }
  359:                 
  360:                 if(this._multipartTree[i].node.parentNode){
  361                      this._currentNode = this._multipartTree[i].node.parentNode;
  362                  }else{
  ...
  372          return true;
  373      }
  374:     
  375:     // handle text or attachment line
  376:     if(["text/plain", "text/html"].indexOf(this._currentNode.meta.contentType || "")>=0 && 
  377:       !this._currentNode.attachment){
  378          this._handleTextLine(line);
  379      }else if(this._currentNode.attachment){
  380          this._handleAttachmentLine(line);
  381      }
  382:     
  383:     return false;
  384  };
  385  
  386  /**
  387   * <p>Processes a complete unfolded header line</p>
  388:  * 
  389:  * <p>Processes a line from current node headers array and replaces its value.
  390   * Input string is in the form of "X-Mailer: PHP" and its replacement would be
  391   * an object <code>{key: "x-mailer", value: "PHP"}</code></p>
  392:  * 
  393:  * <p>Additionally node meta object will be filled also, for example with data from
  394   * To: From: Cc: etc fields.</p>
  395:  * 
  396:  * @param {Number} pos Which header element (from an header lines array) should be processed
  397   */
  398  MailParser.prototype._processHeaderLine = function(pos){
  399      var key, value, parts, line;
  400:     
  401:     pos = pos || 0;
  402:     
  403:     if(!(line = this._currentNode.headers[pos]) || typeof line != "string"){
  404          return;
  405      }
  406  
  407      parts = line.split(":");
  408:     
  409:     key = parts.shift().toLowerCase().trim();
  410      value = parts.join(":").trim();
  411:     
  412:     switch(key){
  413          case "content-type":
  414              this._parseContentType(value);
  ...
  479              break;
  480      }
  481:     
  482:     if(this._currentNode.parsedHeaders[key]){
  483          if(!Array.isArray(this._currentNode.parsedHeaders[key])){
  484              this._currentNode.parsedHeaders[key] = [this._currentNode.parsedHeaders[key]];
  485:         } 
  486:         this._currentNode.parsedHeaders[key].push(this._replaceMimeWords(value));
  487      }else{
  488          this._currentNode.parsedHeaders[key] = this._replaceMimeWords(value);
  489      }
  490:     
  491:     this._currentNode.headers[pos] = {key: key, value: value};
  492  };
  493  
  494  /**
  495   * <p>Creates an empty node element for the mime tree</p>
  496:  * 
  497:  * <p>Created element includes parentNode property and a childNodes array. This is
  498   * needed to later walk the whole mime tree</p>
  499:  * 
  500:  * @param {Object} [parentNode] the parent object for the created node
  501   * @returns {Object} node element for the mime tree
  502   */
  ...
  509          childNodes: []
  510      };
  511:     
  512:     return node;
  513  };
  514  
  515  /**
  516   * <p>Splits a header value into key-value pairs</p>
  517:  * 
  518:  * <p>Splits on <code>;</code> - the first value will be set as <code>defaultValue</code> property and will
  519   * not be handled, others will be split on <code>=</code> to key-value pairs</p>
  520:  * 
  521:  * <p>For example <code>content-type: text/plain; charset=utf-8</code> will become:</p>
  522:  * 
  523:  * <pre>
  524   * {
  525   *     defaultValue: "text/plain",
  ...
  527   * }
  528   * </pre>
  529:  * 
  530:  * @param {String} value A string to be splitted into key-value pairs
  531   * @returns {Object} a key-value object, with defaultvalue property
  532   */
  533  MailParser.prototype._parseHeaderLineWithParams = function(value){
  534      var key, parts, returnValue = {};
  535:     
  536:     parts = value.split(";");
  537      returnValue.defaultValue = parts.shift().toLowerCase();
  538:     
  539:     for(var i=0, len = parts.length; i<len; i++){
  540          value = parts[i].split("=");
  541          key = value.shift().trim().toLowerCase();
  542          value = value.join("=").trim();
  543:         
  544:         // trim quotes
  545          value = this._trimQuotes(value);
  546          returnValue[key] = value;
  547      }
  548:     
  549:     return returnValue;
  550  };
  551  
  552  /**
  553   * <p>Parses a Content-Type header field value</p>
  554:  * 
  555:  * <p>Fetches additional properties from the content type (charset etc.) and fills
  556   * current node meta object with this data</p>
  557:  * 
  558:  * @param {String} value Content-Type string
  559   * @returns {Object} parsed contenttype object
  560   */
  ...
  575              value.charset = value.charset.toLowerCase();
  576              if(value.charset.substr(0,4)=="win-"){
  577:                 value.charset = "windows-"+value.charset.substr(4); 
  578:             }else if(value.charset == "ks_c_5601-1987"){
  579                  value.charset = "cp949";
  580              }else if(value.charset.match(/^utf\d/)){
  581                  value.charset = "utf-"+value.charset.substr(3);
  582              }else if(value.charset.match(/^latin[\-_]?\d/)){
  583:                 value.charset = "iso-8859-"+value.charset.replace(/\D/g,""); 
  584:             }else if(value.charset.match(/^(us\-)?ascii$/)){
  585:                 value.charset = "utf-8"; 
  586:             }  
  587:             this._currentNode.meta.charset = value.charset;
  588          }
  589          if(value.format){
  ...
  596              this._currentNode.meta.mimeBoundary = value.boundary;
  597          }
  598:         
  599:         if(!this._currentNode.meta.fileName && (fileName = this._detectFilename(value))){
  600              this._currentNode.meta.fileName = fileName;
  601          }
  602:         
  603:         if(value.boundary){
  604              this._currentNode.meta.mimeBoundary = value.boundary;
  605              this._multipartTree.push({
  ...
  608              });
  609          }
  610:     } 
  611:     return value;
  612  };
  613  
  614  /**
  615   * <p>Parses file name from a Content-Type or Content-Disposition field</p>
  616:  * 
  617:  * <p>Supports <a href="http://tools.ietf.org/html/rfc2231">RFC2231</a> for
  618   * folded filenames</p>
  619:  * 
  620:  * @param {Object} value Parsed Content-(Type|Disposition) object
  621   * @return {String} filename
  622   */
  623  MailParser.prototype._detectFilename = function(value){
  624      var fileName="", i=0, parts, encoding, name;
  625:     
  626:     if(value.name){
  627          return this._replaceMimeWords(value.name);
  628      }
  629:     
  630:     if(value.filename){
  631          return this._replaceMimeWords(value.filename);
  632      }
  633:     
  634:     // RFC2231
  635      if(value["name*"]){
  636          fileName = value["name*"];
  ...
  646          }
  647      }
  648:     
  649:     if(fileName){
  650          parts = fileName.split("'");
  651          encoding = parts.shift();
  ...
  660  /**
  661   * <p>Parses Content-Disposition header field value</p>
  662:  * 
  663:  * <p>Fetches filename to current node meta object</p>
  664:  * 
  665:  * @param {String} value A Content-Disposition header field
  666   */
  667  MailParser.prototype._parseContentDisposition = function(value){
  668      var returnValue = {},
  669          fileName;
  670:     
  671:     value = this._parseHeaderLineWithParams(value);
  672:     
  673:     if(value){
  674          if(value.defaultValue){
  675              this._currentNode.meta.contentDisposition = value.defaultValue.trim().toLowerCase();
  ...
  683  /**
  684   * <p>Parses "References" header</p>
  685:  * 
  686:  * @param {String} value References header field
  687   */
  688  MailParser.prototype._parseReferences = function(value){
  ...
  697  /**
  698   * <p>Parses "In-Reply-To" header</p>
  699:  * 
  700:  * @param {String} value In-Reply-To header field
  701   */
  702  MailParser.prototype._parseInReplyTo = function(value){
  ...
  711  /**
  712   * <p>Parses the priority of the e-mail</p>
  713:  * 
  714:  * @param {String} value The priority value
  715   * @returns {String} priority string low|normal|high
  716   */
  ...
  741  /**
  742   * <p>Processes a line in text/html or text/plain node</p>
  743:  * 
  744:  * <p>Append the line to the content property</p>
  745:  * 
  746:  * @param {String} line A line to be processed 
  747:  */
  748  MailParser.prototype._handleTextLine = function(line){
  749:     
  750:     if(["quoted-printable", "base64"].indexOf(this._currentNode.meta.transferEncoding)>=0 || this._currentNode.meta.textFormat != "flowed"){
  751          if(typeof this._currentNode.content != "string"){
  752              this._currentNode.content = line;
  ...
  769              this._currentNode.content += "\n"+line;
  770          }
  771:     }  
  772: };
  773  
  774  /**
  775   * <p>Processes a line in an attachment node</p>
  776:  * 
  777:  * <p>If a stream is set up for the attachment write the line to the
  778   * stream as a Buffer object, otherwise append it to the content property</p>
  779:  * 
  780:  * @param {String} line A line to be processed 
  781:  */
  782  MailParser.prototype._handleAttachmentLine = function(line){
  783      if(!this._currentNode.attachment){
  ...
  802  /**
  803   * <p>Finalizes a node processing</p>
  804:  * 
  805:  * <p>If the node is a text/plain or text/html, convert it to UTF-8 encoded string
  806   * If it is an attachment, convert it to a Buffer or if an attachment stream is
  807   * set up, close the stream</p>
  ...
  811  
  812      if(this._currentNode.content){
  813:         
  814:         if(!this._currentNode.attachment){
  815:             
  816:             if(this._currentNode.meta.contentType == "text/html"){
  817                   this._currentNode.meta.charset = this._detectHTMLCharset(this._currentNode.content) || this._currentNode.meta.charset || this.options.defaultCharset || "iso-8859-1";
  818              }
  819:             
  820:             if(this._currentNode.meta.transferEncoding == "quoted-printable"){
  821                  this._currentNode.content = mimelib.decodeQuotedPrintable(this._currentNode.content, false, this._currentNode.meta.charset || this.options.defaultCharset || "iso-8859-1");
  822                  if(this._currentNode.meta.textFormat == "flowed"){
  ...
  844              this._currentNode.meta.length = this._currentNode.content.length;
  845          }
  846:         
  847:     }
  848  
  849      if(this._currentNode.stream){
  ...
  860  /**
  861   * <p>Processes the mime tree</p>
  862:  * 
  863:  * <p>Finds text parts and attachments from the tree. If there's several text/plain
  864   * or text/html parts, push the ones from the lower parts of the tree to the
  865   * alternatives array</p>
  866:  * 
  867:  * <p>Emits "end" when finished</p>
  868   */
  869  MailParser.prototype._processMimeTree = function(){
  870      var level = 0, htmlLevel, textLevel,
  871          returnValue = {}, i, len;
  872:     
  873:     this.mailData = {html:[], text:[], alternatives:[], attachments:[]};
  874:     
  875:     if(!this.mimeTree.meta.mimeMultipart){
  876          this._processMimeNode(this.mimeTree, 0);
  877      }else{
  878          this._walkMimeTree(this.mimeTree);
  879      }
  880:     
  881:     if(this.mailData.html.length){
  882          for(i=0, len=this.mailData.html.length; i<len; i++){
  883              if(!returnValue.html || this.mailData.html[i].level < htmlLevel){
  ...
  904          }
  905      }
  906:     
  907:     if(this.mailData.text.length){
  908          for(i=0, len=this.mailData.text.length; i<len; i++){
  909              if(!returnValue.text || this.mailData.text[i].level < textLevel){
  ...
  930          }
  931      }
  932:     
  933:     returnValue.headers = this.mimeTree.parsedHeaders;
  934:     
  935:     if(this.mimeTree.subject){
  936:         returnValue.subject = this.mimeTree.subject;        
  937:     }
  938:     
  939:     if(this.mimeTree.references){
  940:         returnValue.references = this.mimeTree.references;        
  941:     }
  942:     
  943:     if(this.mimeTree.inReplyTo){
  944:         returnValue.inReplyTo = this.mimeTree.inReplyTo;        
  945:     }
  946:     
  947:     if(this.mimeTree.priority){
  948:         returnValue.priority = this.mimeTree.priority;        
  949:     }
  950:     
  951:     if(this.mimeTree.from){
  952:         returnValue.from = this.mimeTree.from;        
  953:     }
  954:     
  955:     if(this.mimeTree.to){
  956:         returnValue.to = this.mimeTree.to;        
  957:     }
  958:     
  959:     if(this.mimeTree.cc){
  960:         returnValue.cc = this.mimeTree.cc;        
  961:     }
  962:     
  963:     if(this.mimeTree.bcc){
  964:         returnValue.bcc = this.mimeTree.bcc;        
  965:     }
  966:     
  967:     if(this.mailData.attachments.length){
  968          returnValue.attachments = [];
  969          for(i=0, len=this.mailData.attachments.length; i<len; i++){
  ...
  977  /**
  978   * <p>Walks the mime tree and runs processMimeNode on each node of the tree</p>
  979:  * 
  980:  * @param {Object} node A mime tree node
  981   * @param {Number} [level=0] current depth
  982   */
  ...
  991  /**
  992   * <p>Processes of a node in the mime tree</p>
  993:  * 
  994:  * <p>Pushes the node into appropriate <code>this.mailData</code> array (<code>text/html</code> to <code>this.mailData.html</code> array etc)</p>
  995:  * 
  996:  * @param {Object} node A mime tree node
  997   * @param {Number} [level=0] current depth
  998   * @param {String} mimeMultipart Type of multipart we are dealing with (if any)
  ...
 1000  MailParser.prototype._processMimeNode = function(node, level, mimeMultipart){
 1001      var i, len;
 1002:     
 1003:     level = level || 0;
 1004  
 1005      if(!node.attachment){
 ....
 1026          }
 1027          this.mailData.attachments.push({content: node.meta || {}, level: level});
 1028:         
 1029:         if(this.options.showAttachmentLinks && mimeMultipart == "mixed" && this.mailData.html.length){
 1030              for(i=0, len = this.mailData.html.length; i<len; i++){
 1031                  if(this.mailData.html[i].level == level){
 ....
 1035              }
 1036          }
 1037:     }  
 1038: };
 1039  
 1040  /**
 1041   * <p>Joins two HTML blocks by removing the header of the added element<p>
 1042:  * 
 1043:  * @param {Object} htmlNode Original HTML contents node object
 1044   * @param {String} newHTML HTML text to add to the original object node
 1045   */
 1046  MailParser.prototype._joinHTMLNodes = function(htmlNode, newHTML){
 1047      var inserted = false;
 1048:     
 1049:     // process new HTML
 1050      newHTML = (newHTML || "").toString("utf-8").trim();
 1051:     
 1052:     // remove doctype from the beginning
 1053      newHTML = newHTML.replace(/^\s*<\!doctype( [^>]*)?>/gi, "");
 1054:     
 1055:     // remove <head> and <html> blocks
 1056      newHTML = newHTML.replace(/<head( [^>]*)?>(.*)<\/head( [^>]*)?>/gi, "").
 1057                      replace(/<\/?html( [^>]*)?>/gi, "").
 1058                      trim();
 1059:     
 1060:     // keep only text between <body> tags (if <body exists)
 1061      newHTML.replace(/<body(?: [^>]*)?>(.*)<\/body( [^>]*)?>/gi, function(match, body){
 1062          newHTML = body.trim();
 1063      });
 1064:     
 1065:     htmlNode.content = (htmlNode.content || "").toString("utf-8").trim();
 1066:     
 1067:     htmlNode.content = htmlNode.content.replace(/<\/body( [^>]*)?>/i, function(match){
 1068          inserted = true;
 1069          return "<br/>\n" + newHTML + match;
 1070      });
 1071:     
 1072:     if(!inserted){
 1073:         htmlNode.content += "<br/>\n" + newHTML; 
 1074:     }
 1075  };
 1076  
 1077  /**
 1078   * <p>Adds filename placeholder to the HTML if needed</p>
 1079:  * 
 1080:  * @param {Object} htmlNode Original HTML contents node object
 1081   * @param {String} attachment Attachment meta object
 1082   */
 ....
 1090  
 1091      htmlNode.content = (htmlNode.content || "").toString("utf-8").trim();
 1092:     
 1093:     htmlNode.content = htmlNode.content.replace(/<\/body( [^>]*)?>/i, function(match){
 1094          inserted = true;
 1095          return "<br/>\n" + newHTML + match;
 1096      });
 1097:     
 1098:     if(!inserted){
 1099:         htmlNode.content += "<br/>\n" + newHTML; 
 1100:     }
 1101  };
 1102  
 1103  /**
 1104   * <p>Converts a string from one charset to another</p>
 1105:  * 
 1106:  * @param {Buffer|String} value A String to be converted
 1107   * @param {String} fromCharset source charset
 1108   * @param {String} [toCharset="UTF-8"] destination charset
 ....
 1112      toCharset = (toCharset || "utf-8").toUpperCase();
 1113      fromCharset = (fromCharset || "utf-8").toUpperCase();
 1114:     
 1115:     value = typeof value=="string"?new Buffer(value, "binary"):value;
 1116:     
 1117:     if(toCharset == fromCharset){
 1118          return value;
 1119      }
 1120:     
 1121:     value = encodinglib.convert(value, toCharset, fromCharset);
 1122:     
 1123:     return value;
 1124  };
 1125  
 1126  /**
 1127   * <p>Converts a string to UTF-8</p>
 1128:  * 
 1129:  * @param {String} value String to be encoded
 1130   * @returns {String} UTF-8 encoded string
 1131   */
 ....
 1137  /**
 1138   * <p>Encodes a header string to UTF-8</p>
 1139:  * 
 1140:  * @param {String} value String to be encoded
 1141   * @returns {String} UTF-8 encoded string
 1142   */
 ....
 1148  /**
 1149   * <p>Replaces mime words in a string with UTF-8 encoded strings</p>
 1150:  * 
 1151:  * @param {String} value String to be converted
 1152   * @returns {String} converted string
 1153   */
 ....
 1162  /**
 1163   * <p>Removes enclosing quotes ("", '', &lt;&gt;) from a string</p>
 1164:  * 
 1165:  * @param {String} value String to be converted
 1166   * @returns {String} converted string
 1167   */
 1168  MailParser.prototype._trimQuotes = function(value){
 1169      value = (value || "").trim();
 1170:     if((value.charAt(0)=='"' && value.charAt(value.length-1)=='"') || 
 1171:       (value.charAt(0)=="'" && value.charAt(value.length-1)=="'") || 
 1172:       (value.charAt(0)=="<" && value.charAt(value.length-1)==">")){
 1173          value = value.substr(1,value.length-2);
 1174      }
 ....
 1178  /**
 1179   * <p>Generates a context unique filename for an attachment</p>
 1180:  * 
 1181:  * <p>If a filename already exists, append a number to it</p>
 1182:  * 
 1183:  * <ul>
 1184   *     <li>file.txt</li>
 1185   *     <li>file-1.txt</li>
 1186   *     <li>file-2.txt</li>
 1187   * </ul>
 1188:  * 
 1189:  * @param {String} fileName source filename
 1190   * @param {String} contentType source content type
 1191   * @returns {String} generated filename
 ....
 1193  MailParser.prototype._generateFileName = function(fileName, contentType){
 1194      var ext, defaultExt = "";
 1195:     
 1196:     if(contentType){
 1197          defaultExt = mime.extension(contentType);
 1198          defaultExt = defaultExt?"."+defaultExt:"";
 1199      }
 1200:     
 1201:     fileName = fileName || "attachment"+defaultExt;
 1202:     
 1203:     // remove path if it is included in the filename
 1204      fileName = fileName.toString().split(/[\/\\]+/).pop().replace(/^\.+/,"") || "attachment";
 1205:     
 1206:     if(fileName in this._fileNames){
 1207          this._fileNames[fileName]++;
 1208          ext = fileName.substr((fileName.lastIndexOf(".") || 0)+1);
 ....
 1215          this._fileNames[fileName] = 0;
 1216      }
 1217:     return fileName;  
 1218: };
 1219  
 1220  
 1221  /**
 1222   * <p>Replaces character set to UTF-8 in HTML &lt;meta&gt; tags</p>
 1223:  * 
 1224:  * @param {String} HTML html contents
 1225   * @returns {String} updated HTML
 1226   */
 1227  MailParser.prototype._updateHTMLCharset = function(html){
 1228:     
 1229:     html = html.replace(/\n/g,"\u0000").
 1230          replace(/<meta[^>]*>/gi, function(meta){
 1231              if(meta.match(/http\-equiv\s*=\s*"?content\-type/i)){
 ....
 1238          }).
 1239          replace(/\u0000/g,"\n");
 1240:     
 1241:     return html;
 1242  };
 1243  
 1244  /**
 1245   * <p>Detects the charset of an HTML file</p>
 1246:  * 
 1247:  * @param {String} HTML html contents
 1248   * @returns {String} Charset for the HTML
 1249   */
 1250  MailParser.prototype._detectHTMLCharset = function(html){
 1251      var charset, input, meta;
 1252:     
 1253:     if(typeof html !=" string"){
 1254          html = html.toString("ascii");
 1255      }
 1256:     
 1257:     if((meta = html.match(/<meta\s+http-equiv=["']content-type["'][^>]*?>/i))){
 1258          input = meta[0];
 1259      }

/Users/andris/Projects/mailparser/lib/streams.js:
   12      Stream.call(this);
   13      this.writable = true;
   14:     
   15:     this.checksum = crypto.createHash("md5");
   16      this.length = 0;
   17:     
   18:     this.current = "";
   19  }
   20  utillib.inherits(Base64Stream, Stream);
   ..
   38          return;
   39      }
   40:     
   41:     data = (data || "").toString("utf-8");
   42:     
   43:     var remainder = 0;
   44      this.current += data.replace(/[^\w\+\/=]/g,'');
   45      var buffer = new Buffer(this.current.substr(0, this.current.length - this.current.length % 4),"base64");
   ..
   55      Stream.call(this);
   56      this.writable = true;
   57:     
   58:     this.checksum = crypto.createHash("md5");
   59      this.length = 0;
   60:     
   61:     this.charset = charset || "UTF-8";
   62      this.current = undefined;
   63  }
   ..
   83          return;
   84      }
   85:     
   86:     data = (data || "").toString("utf-8");
   87      if(data.match(/^\r\n/)){
   88          data = data.substr(2);
   89      }
   90:     
   91:     if(typeof this.current !="string"){
   92          this.current = data;
   93      }else{
   ..
  109      this.length += buffer.length;
  110      this.checksum.update(buffer);
  111:     
  112:     this.emit("data", buffer);
  113  };
  114  
  ...
  116      Stream.call(this);
  117      this.writable = true;
  118:     
  119:     this.checksum = crypto.createHash("md5");
  120      this.length = 0;
  121:     
  122:     this.charset = charset || "UTF-8";
  123      this.current = "";
  124  }

/Users/andris/Projects/mailparser/node_modules/encoding/node_modules/iconv-lite/index.js:
    7          return iconv.getCodec(encoding).fromEncoding(buf);
    8      },
    9:     
   10:     defaultCharUnicode: '�',
   11      defaultCharSingleByte: '?',
   12:     
   13:     // Get correct codec for given encoding.
   14      getCodec: function(encoding) {
   15          var enc = encoding || "utf8";
   ..
   29                  codecOptions = codec;
   30                  enc = codec.type;
   31:             } 
   32:             else if (type === "Function")
   33                  // Codec itself.
   34                  return codec(codecOptions);
   ..
   37          }
   38      },
   39:     
   40:     // Define basic encodings
   41      encodings: {
   42          internal: function(options) {
   ..
   52          ascii: "internal",
   53          base64: "internal",
   54:         
   55:         // Codepage single-byte encodings.
   56          singlebyte: function(options) {
   57              // Prepare chars if needed
   ..
   59                  if (!options.chars || (options.chars.length !== 128 && options.chars.length !== 256))
   60                      throw new Error("Encoding '"+options.type+"' has incorrect 'chars' (must be of len 128 or 256)");
   61:                 
   62:                 if (options.chars.length === 128)
   63                      options.chars = asciiString + options.chars;
   64  
   65                  options.charsBuf = new Buffer(options.chars, 'ucs2');
   66              }
   67:             
   68:             if (!options.revCharsBuf) {
   69                  options.revCharsBuf = new Buffer(65536);
   70                  var defChar = iconv.defaultCharSingleByte.charCodeAt(0);
   ..
   98                  }
   99              }
  100:             
  101:             return {
  102                  toEncoding: toTableEncoding,
  103                  fromEncoding: fromTableEncoding,
  ...
  159  function toSingleByteEncoding(str) {
  160      str = ensureString(str);
  161:     
  162:     var buf = new Buffer(str.length);
  163      var revCharsBuf = this.options.revCharsBuf;
  164      for (var i = 0; i < str.length; i++)
  165          buf[i] = revCharsBuf[str.charCodeAt(i)];
  166:     
  167:     return buf;
  168  }
  169  
  170  function fromSingleByteEncoding(buf) {
  171      buf = ensureBuffer(buf);
  172:     
  173:     // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
  174      var charsBuf = this.options.charsBuf;
  175      var newBuf = new Buffer(buf.length*2);

/Users/andris/Projects/mailparser/node_modules/encoding/node_modules/iconv-lite/generation/generate-singlebyte.js:
   36      {
   37          // Macintosh code pages
   38:         encodings: ["macCroatian", "macCyrillic", "macGreek", 
   39:                     "macIceland", "macRoman", "macRomania", 
   40:                     "macThai", "macTurkish", "macUkraine"],
   41      },
   42      {
   ..
   87      "21866": "koi8u",
   88      "ibm1168": "koi8u",
   89:     
   90: };
   91  
   92  // Add all encodings from encodingFamilies.
   ..
   96              encoding = family.convert(encoding);
   97  
   98:         var encodingIconvName = encoding.name ? encoding.name : encoding; 
   99:         var encodingName = encodingIconvName.replace(/[-_]/g, "").toLowerCase();
  100  
  101          encodings[encodingName] = {
  ...
  112  
  113  // Write encodings.
  114: fs.writeFileSync("encodings/singlebyte.js", 
  115:     "module.exports = " + JSON.stringify(encodings, undefined, "  ") + ";");
  116  
  117  
  ...
  125          try {
  126              var convertedChar = iconvToUtf8.convert(new Buffer([b])).toString();
  127:             
  128:             if (convertedChar.length != 1)
  129                  throw new Error("Single-byte encoding error: Must return single char.");
  130          } catch (exception) {

/Users/andris/Projects/mailparser/node_modules/encoding/node_modules/iconv-lite/test/cyrillic-test.js:
   60          "Convert from buffer": function() {
   61              for (var key in encoding.encodedStrings)
   62:                 assert.strictEqual(iconv.fromEncoding(encoding.encodedStrings[key], enc), 
   63:                     baseStrings[key]);
   64          },
   65          "Convert to buffer": function() {
   66              for (var key in encoding.encodedStrings)
   67:                 assert.strictEqual(iconv.toEncoding(baseStrings[key], enc).toString('binary'), 
   68:                     encoding.encodedStrings[key].toString('binary'));
   69          },
   70          "Try different variations of encoding": function() {
   ..
   79          }
   80      };
   81:     
   82:     testsBatch[encoding.name+":"] = tests;
   83  });
   84  

/Users/andris/Projects/mailparser/node_modules/encoding/node_modules/iconv-lite/test/gbk-test.js:
   10      "Vows is working": function() {},
   11      "Return values are of correct types": function() {
   12:         assert.ok(iconv.toEncoding(testString, "utf8") instanceof Buffer);        
   13:         var s = iconv.fromEncoding(new Buffer(testString), "utf8");
   14          assert.strictEqual(Object.prototype.toString.call(s), "[object String]");
   15      },
   16:     "GBK correctly encoded/decoded": function() {    
   17:         assert.strictEqual(iconv.toEncoding(testString, "GBK").toString('binary'), testStringGBKBuffer.toString('binary'));
   18          assert.strictEqual(iconv.fromEncoding(testStringGBKBuffer, "GBK"), testString);
   19      },
   20:     "GB2312 correctly encoded/decoded": function() {    
   21:         assert.strictEqual(iconv.toEncoding(testString, "GB2312").toString('binary'), testStringGBKBuffer.toString('binary'));
   22          assert.strictEqual(iconv.fromEncoding(testStringGBKBuffer, "GB2312"), testString);
   23      },

/Users/andris/Projects/mailparser/node_modules/encoding/node_modules/iconv-lite/test/greek-test.js:
   54          "Convert from buffer": function() {
   55              for (var key in encoding.encodedStrings)
   56:                 assert.strictEqual(iconv.fromEncoding(encoding.encodedStrings[key], enc), 
   57:                     baseStrings[key]);
   58          },
   59          "Convert to buffer": function() {
   60              for (var key in encoding.encodedStrings)
   61:                 assert.strictEqual(iconv.toEncoding(baseStrings[key], enc).toString('binary'), 
   62:                     encoding.encodedStrings[key].toString('binary'));
   63          },
   64          "Try different variations of encoding": function() {
   ..
   73          }
   74      };
   75:     
   76:     testsBatch[encoding.name+":"] = tests;
   77  });
   78  

/Users/andris/Projects/mailparser/node_modules/encoding/node_modules/iconv-lite/test/main-test.js:
   11      "Return values are of correct types": function() {
   12          assert.ok(iconv.toEncoding(testString, "utf8") instanceof Buffer);
   13:         
   14:         var s = iconv.fromEncoding(new Buffer(testString), "utf8");
   15          assert.strictEqual(Object.prototype.toString.call(s), "[object String]");
   16      },
   ..
   21          });
   22      },
   23:     "Base64 correctly encoded/decoded": function() {    
   24:         assert.strictEqual(iconv.toEncoding(testStringBase64, "base64").toString("binary"), testString);
   25          assert.strictEqual(iconv.fromEncoding(new Buffer(testString, "binary"), "base64"), testStringBase64);
   26      },
   27:     "Latin1 correctly encoded/decoded": function() {    
   28:         assert.strictEqual(iconv.toEncoding(testStringLatin1, "latin1").toString("binary"), testStringLatin1);
   29          assert.strictEqual(iconv.fromEncoding(new Buffer(testStringLatin1, "binary"), "latin1"), testStringLatin1);
   30      },

/Users/andris/Projects/mailparser/node_modules/nodeunit/deps/ejs/ejs.js:
   31      return function(p){
   32        if ('.' != p[0]) return require(p);
   33:       
   34:       var path = parent.split('/')
   35          , segs = p.split('/');
   36        path.pop();
   37:       
   38:       for (var i = 0; i < segs.length; i++) {
   39          var seg = segs[i];
   40          if ('..' == seg) path.pop();
   ..
   69  /**
   70   * Filters.
   71:  * 
   72:  * @type Object
   73   */
   74  
   ..
   77  /**
   78   * Intermediate js cache.
   79:  * 
   80:  * @type Object
   81   */
   82  
   ..
  138    // Alter exception message
  139    err.path = filename;
  140:   err.message = (filename || 'ejs') + ':' 
  141:     + lineno + '\n' 
  142:     + context + '\n\n' 
  143:     + err.message;
  144:   
  145:   throw err;
  146  }
  147  
  ...
  164      , "\n  buf.push('"
  165    ];
  166:   
  167:   var lineno = 1;
  168  
  169    for (var i = 0, len = str.length; i < len; ++i) {
  170      if (str.slice(i, open.length + i) == open) {
  171        i += open.length
  172:   
  173:       var prefix, postfix, line = '__stack.lineno=' + lineno;
  174        switch (str[i]) {
  175          case '=':
  ...
  229  var compile = exports.compile = function(str, options){
  230    options = options || {};
  231:   
  232:   var input = JSON.stringify(str)
  233      , filename = options.filename
  234          ? JSON.stringify(options.filename)
  235          : 'undefined';
  236:   
  237:   // Adds the fancy stack trace meta info
  238    str = [
  239      'var __stack = { lineno: 1, input: ' + input + ', filename: ' + filename + ' };',
  ...
  245      '}'
  246    ].join("\n");
  247:   
  248:   if (options.debug) console.log(str);
  249    var fn = new Function('locals, filters, escape', str);
  250    return function(locals){
  ...
  528      .replace(/"/g, '&quot;');
  529  };
  530:  
  531: }); // module: utils.js
  532  

/Users/andris/Projects/mailparser/node_modules/nodeunit/deps/ejs/lib/ejs.js:
   20  /**
   21   * Filters.
   22:  * 
   23:  * @type Object
   24   */
   25  
   ..
   28  /**
   29   * Intermediate js cache.
   30:  * 
   31:  * @type Object
   32   */
   33  
   ..
   89    // Alter exception message
   90    err.path = filename;
   91:   err.message = (filename || 'ejs') + ':' 
   92:     + lineno + '\n' 
   93:     + context + '\n\n' 
   94:     + err.message;
   95:   
   96:   throw err;
   97  }
   98  
   ..
  115      , "\n  buf.push('"
  116    ];
  117:   
  118:   var lineno = 1;
  119  
  120    for (var i = 0, len = str.length; i < len; ++i) {
  121      if (str.slice(i, open.length + i) == open) {
  122        i += open.length
  123:   
  124:       var prefix, postfix, line = '__stack.lineno=' + lineno;
  125        switch (str.substr(i, 1)) {
  126          case '=':
  ...
  178  var compile = exports.compile = function(str, options){
  179    options = options || {};
  180:   
  181:   var input = JSON.stringify(str)
  182      , filename = options.filename
  183          ? JSON.stringify(options.filename)
  184          : 'undefined';
  185:   
  186:   // Adds the fancy stack trace meta info
  187    str = [
  188      'var __stack = { lineno: 1, input: ' + input + ', filename: ' + filename + ' };',
  ...
  194      '}'
  195    ].join("\n");
  196:   
  197:   if (options.debug) console.log(str);
  198    var fn = new Function('locals, filters, escape', str);
  199    return function(locals){

/Users/andris/Projects/mailparser/node_modules/nodeunit/deps/ejs/support/compile.js:
   50  /**
   51   * Parse the given `js`, currently supporting:
   52:  * 
   53:  *    'if' ['node' | 'browser']
   54   *    'end'
   55:  * 
   56:  */
   57  
   58  function parseConditionals(js) {
   ..
  113  
  114  var browser = {
  115:   
  116:   /**
  117     * Require a module.
  118     */
  119:   
  120:   require: function require(p){
  121      var path = require.resolve(p)
  122        , mod = require.modules[path];
  ...
  128      return mod.exports;
  129    },
  130:   
  131:   /**
  132     * Resolve module path.
  133     */
  ...
  141        || orig;
  142    },
  143:   
  144:   /**
  145     * Return relative require().
  146     */
  ...
  149      return function(p){
  150        if ('.' != p.substr(0, 1)) return require(p);
  151:       
  152:       var path = parent.split('/')
  153          , segs = p.split('/');
  154        path.pop();
  155:       
  156:       for (var i = 0; i < segs.length; i++) {
  157          var seg = segs[i];
  158          if ('..' == seg) path.pop();
  ...
  163      };
  164    },
  165:   
  166:   /**
  167     * Register a module.
  168     */

/Users/andris/Projects/mailparser/node_modules/nodeunit/deps/ejs/test/ejs.test.js:
   11      assert.ok(/^\d+\.\d+\.\d+$/.test(ejs.version), 'Test .version format');
   12    },
   13:   
   14:   'test html': function(){
   15      assert.equal('<p>yay</p>', ejs.render('<p>yay</p>'));
   16    },
   17:   
   18:   'test buffered code': function(){
   19      var html = '<p>tj</p>',
   20        str = '<p><%= name %></p>',
   ..
   22      assert.equal(html, ejs.render(str, { locals: locals }));
   23    },
   24:   
   25:   'test unbuffered code': function(){
   26      var html = '<p>tj</p>',
   27        str = '<% if (name) { %><p><%= name %></p><% } %>',
   ..
   29      assert.equal(html, ejs.render(str, { locals: locals }));
   30    },
   31:   
   32:   'test `scope` option': function(){
   33      var html = '<p>tj</p>',
   34        str = '<p><%= this %></p>';
   35      assert.equal(html, ejs.render(str, { scope: 'tj' }));
   36    },
   37:   
   38:   'test escaping': function(){
   39      assert.equal('&lt;script&gt;', ejs.render('<%= "<script>" %>'));
   40      assert.equal('<script>', ejs.render('<%- "<script>" %>'));
   41    },
   42:   
   43:   'test newlines': function(){
   44      var html = '\n<p>tj</p>\n<p>tj@sencha.com</p>',
   45        str = '<% if (name) { %>\n<p><%= name %></p>\n<p><%= email %></p><% } %>',
   ..
   47      assert.equal(html, ejs.render(str, { locals: locals }));
   48    },
   49:   
   50:   'test single quotes': function(){
   51      var html = '<p>WAHOO</p>',
   52        str = "<p><%= up('wahoo') %></p>",
   ..
   79      assert.equal(html, ejs.render(str));
   80    },
   81:   
   82:   'test double quotes': function(){
   83      var html = '<p>WAHOO</p>',
   84        str = '<p><%= up("wahoo") %></p>',
   ..
   86      assert.equal(html, ejs.render(str, { locals: locals }));
   87    },
   88:   
   89:   'test multiple double quotes': function() {
   90      var html = '<p>just a "test" wahoo</p>',
   91        str = '<p>just a "test" wahoo</p>';
   92      assert.equal(html, ejs.render(str));
   93    },
   94:   
   95:   'test whitespace': function(){
   96      var html = '<p>foo</p>',
   97        str = '<p><%="foo"%></p>';
   ..
  102      assert.equal(html, ejs.render(str, { locals: { bar: 'foo' }}));
  103    },
  104:   
  105:   'test custom tags': function(){
  106      var html = '<p>foo</p>',
  107        str = '<p>{{= "foo" }}</p>';
  ...
  138      }));
  139    },
  140:   
  141:   'test global custom tags': function(){
  142      var html = '<p>foo</p>',
  143        str = '<p>{{= "foo" }}</p>';
  ...
  148      delete ejs.close;
  149    },
  150:   
  151:   'test iteration': function(){
  152      var html = '<p>foo</p>',
  153        str = '<% for (var key in items) { %>'
  ...
  159        }
  160      }));
  161:     
  162:     var html = '<p>foo</p>',
  163        str = '<% items.forEach(function(item){ %>'
  164          + '<p><%= item %></p>'
  ...
  170      }));
  171    },
  172:   
  173:   'test filter support': function(){
  174      var html = 'Zab',
  175        str = '<%=: items | reverse | first | reverse | capitalize %>';
  ...
  180      }));
  181    },
  182:   
  183:   'test filter argument support': function(){
  184      var html = 'tj, guillermo',
  185        str = '<%=: users | map:"name" | join:", " %>';
  ...
  193      }));
  194    },
  195:   
  196:   'test sort_by filter': function(){
  197      var html = 'tj',
  198        str = '<%=: users | sort_by:"name" | last | get:"name" %>';
  ...
  207      }));
  208    },
  209:   
  210:   'test custom filters': function(){
  211      var html = 'Welcome Tj Holowaychuk',
  212        str = '<%=: users | first | greeting %>';
  ...
  225    },
  226  
  227:   'test useful stack traces': function(){  
  228:     var str = [
  229        "A little somethin'",
  230        "somethin'",
  231:       "<% if (name) { %>", // Failing line 
  232:       "  <p><%= name %></p>",
  233        "  <p><%= email %></p>",
  234        "<% } %>"
  235      ].join("\n");
  236:     
  237:     try {
  238        ejs.render(str)
  239      } catch( err ){
  ...
  244      }
  245    },
  246:   
  247:   'test useful stack traces multiline': function(){  
  248:     var str = [
  249        "A little somethin'",
  250        "somethin'",
  ...
  252        "   var multiline = 'javascript';",
  253        "%>",
  254:       "<% if (name) { %>", // Failing line 
  255:       "  <p><%= name %></p>",
  256        "  <p><%= email %></p>",
  257        "<% } %>"
  258      ].join("\n");
  259:     
  260:     try {
  261        ejs.render(str)
  262      } catch( err ){

/Users/andris/Projects/mailparser/node_modules/nodeunit/examples/nested/nested_reporter_test.unit.js:
    1  var testCase  = require('nodeunit').testCase;
    2: /* 
    3:  This is an example test suite to demonstrate the nested test reporter.
    4   Run with --reporter nested, e.g.,
    5   nodeunit --reporter nested nested_reporter_test.unit.js
    .
   25        TC 3.1
   26          TC 3.1.1
   27:           Test 3.1.1.1 (should fail) (fail) ✖ 
   28:     AssertionError: false == true
   29        // stack trace here.
   30  

/Users/andris/Projects/mailparser/node_modules/nodeunit/lib/reporters/junit.js:
  172                          );
  173                      }
  174:                     
  175:                     if (callback) callback(assertions.failures() ? new Error('We have got test failures.') : undefined);
  176                  });
  177              });

/Users/andris/Projects/mailparser/node_modules/nodeunit/lib/reporters/machineout.js:
   75              for (var i = 0; i < names.length; i += 1) {
   76                  console.log(createErrorMessage(
   77:                     'Error', names[i], 
   78:                     '', '', '', 
   79:                     'Undone tests - To fix this, make sure all tests call test.done()'
   80                  ));
   81              }

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/lib/tap-assert.js:
  216    extra.found = a
  217    extra.doNotWant = b
  218:   
  219:   if (Buffer.isBuffer(a) && Buffer.isBuffer(b)) {
  220      return assert(!bufferEqual(a, b), message, extra)
  221    } else {
  ...
  353      return obj
  354    }
  355:    
  356:   return Object.keys(obj).sort().reduce(function (acc, key) {
  357      acc[key] = sortObject(obj[key])
  358      return acc

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/lib/tap-cov-html.js:
   18  
   19        f + ' (' + st.loc + ')</title>\n' +
   20:       '<style type="text/css">\n' + 
   21:       'li {\n' +
   22        '  font-family: monospace;\n' +
   23        '  white-space: pre;\n' +
   ..
   29        st.missing.length + ', Percentage: ' + st.percentage + '</h2>' +
   30        '<h2>Source:</h2>\n' +
   31:       '<ol>\n' + 
   32:       st.lines.map(function(line) {
   33          var number = line.number,
   34              color = (missing_lines.indexOf(number) !== -1) ? '#fcc' : '#cfc';
   35          return '<li id="L' + line.number + '" style="background-color: ' + color +
   36                 ';">' + line.source.replace(/</g, "&lt;") + '</li>';
   37:       }).join('\n') + 
   38:       '</ol>\n' +
   39        '<h2>Data</h2>\n'+
   40        '<pre>' + util.inspect(st, true, Infinity, false).replace(/</g, "&lt;") + '</pre></body>\n</html>';
   41  
   42        fs.writeFile(
   43:         cov_dir + '/' + 
   44:         f.replace(process.cwd() + '/', '').replace(/\//g, '+') + '.html',
   45          out,
   46          'utf8',
   ..
   71          }
   72          cb();
   73:       });   
   74:     }
   75    );
   76  };

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/buffer-equal/index.js:
    5      if (!Buffer.isBuffer(b)) return undefined;
    6      if (a.length !== b.length) return false;
    7:     
    8:     for (var i = 0; i < a.length; i++) {
    9          if (a[i] !== b[i]) return false;
   10      }
   11:     
   12:     return true;
   13  };
   14  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/index.js:
   17          s.readable = true;
   18          s.writable = true;
   19:         
   20:         difflet(opts, prev, next);
   21          return data;
   22      };
   ..
   36          stream.end = function () { this.emit('end') };
   37      }
   38:     
   39:     if (!opts) opts = {};
   40      if (opts.start === undefined && opts.stop === undefined) {
   41          var c = charm(stream);
   ..
   57          else stream.write(buf)
   58      };
   59:     
   60:     var commaFirst = opts.comma === 'first';
   61:     
   62:     var stringify = function (node, params) {
   63          return stringifier.call(this, true, node, params || opts);
   64      };
   ..
   66          return stringifier.call(this, false, node, params || opts);
   67      };
   68:     
   69:     var levels = 0;
   70      function set (type) {
   71          if (levels === 0) opts.start(type, stream);
   72          levels ++;
   73      }
   74:     
   75:     function unset (type) {
   76          if (--levels === 0) opts.stop(type, stream);
   77      }
   78:     
   79:     function stringifier (insertable, node, opts) {
   80          var indent = opts.indent;
   81:         
   82:         if (insertable) {
   83              var prevNode = traverse.get(prev, this.path || []);
   84          }
   85          var inserted = insertable && prevNode === undefined;
   86:         
   87:         var indentx = indent ? Array(
   88              ((this.path || []).length + 1) * indent + 1
   89          ).join(' ') : '';
   90          if (commaFirst) indentx = indentx.slice(indent);
   91:         
   92:         if (Array.isArray(node)) {
   93              var updated = (prevNode || traverse.has(prev, this.path))
   94                  && !Array.isArray(prevNode);
   ..
   96                  set('updated');
   97              }
   98:             
   99:             if (opts.comment && !Array.isArray(prevNode)) {
  100                  indent = 0;
  101              }
  102:             
  103:             this.before(function () {
  104                  if (inserted) set('inserted');
  105                  if (indent && commaFirst) {
  ...
  117                  }
  118              });
  119:             
  120:             this.post(function (child) {
  121                  if (!child.isLast && !(indent && commaFirst)) {
  122                      write(',');
  123                  }
  124:                 
  125:                 var prev = prevNode && prevNode[child.key];
  126                  if (indent && opts.comment && child.node !== prev
  127                  && (typeof child.node !== 'object' || typeof prev !== 'object')
  ...
  134                      unset('comment');
  135                  }
  136:                 
  137:                 if (!child.isLast) {
  138                      if (indent && commaFirst) {
  139                          write('\n' + indentx + ', ');
  ...
  144                  }
  145              });
  146:             
  147:             this.after(function () {
  148                  if (indent && commaFirst) write('\n' + indentx);
  149                  else if (indent) write('\n' + indentx.slice(indent));
  150:                 
  151:                 write(']');
  152                  if (updated) unset('updated');
  153                  if (inserted) unset('inserted');
  ...
  156          else if (isRegExp(node)) {
  157              this.block();
  158:             
  159:             if (inserted) {
  160                  set('inserted');
  161                  write(node.toString());
  ...
  193                  : []
  194              ;
  195:             
  196:             this.before(function () {
  197                  if (inserted) set('inserted');
  198                  write(indent && commaFirst && !this.isRoot
  ...
  201                  );
  202              });
  203:             
  204:             this.pre(function (x, key) {
  205                  if (insertable) {
  206                      var obj = traverse.get(prev, this.path.concat(key));
  ...
  210                      }
  211                  }
  212:                 
  213:                 if (indent && !commaFirst) write('\n' + indentx);
  214:                 
  215:                 plainStringify(key);
  216                  write(indent ? ' : ' : ':');
  217              });
  218:             
  219:             this.post(function (child) {
  220                  if (!child.isLast && !(indent && commaFirst)) {
  221                      write(',');
  222                  }
  223:                 
  224:                 if (child.isLast && deleted.length) {
  225                      if (insertedKey) unset('inserted');
  226                      insertedKey = false;
  ...
  230                      insertedKey = false;
  231                  }
  232:                 
  233:                 var prev = prevNode && prevNode[child.key];
  234                  if (indent && opts.comment && child.node !== prev
  235                  && (typeof child.node !== 'object' || typeof prev !== 'object')
  ...
  242                      unset('comment');
  243                  }
  244:                 
  245:                 if (child.isLast && deleted.length) {
  246                      if (insertedKey) unset('inserted');
  247                      insertedKey = false;
  248:                     
  249:                     if (indent && commaFirst) {
  250                          write('\n' + indentx + ', ')
  251                      }
  ...
  266                  }
  267              });
  268:             
  269:             this.after(function () {
  270                  if (inserted) unset('inserted');
  271:                 
  272:                 if (deleted.length) {
  273                      if (indent && !commaFirst
  274                      && Object.keys(node).length === 0) {
  275                          write('\n' + indentx);
  276                      }
  277:                     
  278:                     set('deleted');
  279                      deleted.forEach(function (key, ix) {
  280                          if (indent && opts.comment) {
  ...
  285                              set('deleted');
  286                          }
  287:                         
  288:                         plainStringify(key);
  289                          write(indent ? ' : ' : ':');
  290                          traverse(prevNode[key]).forEach(function (x) {
  291                              plainStringify.call(this, x, { indent : 0 });
  292                          });
  293:                         
  294:                         var last = ix === deleted.length - 1;
  295                          if (insertable && !last) {
  296                              if (indent && commaFirst) {
  ...
  305                      unset('deleted');
  306                  }
  307:                 
  308:                 if (commaFirst && indent) {
  309                      write(indentx.slice(indent) + ' }');
  310                  }
  ...
  317          else {
  318              var changed = false;
  319:             
  320:             if (inserted) set('inserted');
  321              else if (insertable && !deepEqual(prevNode, node)) {
  322                  changed = true;
  323                  set('updated');
  324              }
  325:             
  326:             if (typeof node === 'string') {
  327                  write('"' + node.toString().replace(/"/g, '\\"') + '"');
  328              }
  ...
  345                  write(node.toString());
  346              }
  347:             
  348:             if (inserted) unset('inserted');
  349              else if (changed) unset('updated');
  350          }
  351      }
  352:     
  353:     if (opts.stream) {
  354          traverse(next).forEach(stringify);
  355      }
  ...
  358          stream.emit('end');
  359      });
  360:     
  361:     return stream;
  362  }
  363  
  364  function isRegExp (node) {
  365      return node instanceof RegExp || (node
  366:         && typeof node.test === 'function' 
  367:         && typeof node.exec === 'function'
  368          && typeof node.compile === 'function'
  369          && node.constructor && node.constructor.name === 'RegExp'

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/charm/index.js:
    9          else input = s
   10      }
   11:     
   12:     var output = null;
   13      function setOutput (s) {
   14          if (output) throw new Error('multiple outputs specified')
   15          else output = s
   16      }
   17:     
   18:     for (var i = 0; i < arguments.length; i++) {
   19          var arg = arguments[i];
   20          if (!arg) continue;
   21          if (arg.readable) setInput(arg)
   22          else if (arg.stdin || arg.input) setInput(arg.stdin || arg.input)
   23:         
   24:         if (arg.writable) setOutput(arg)
   25          else if (arg.stdout || arg.output) setOutput(arg.stdout || arg.output)
   26:         
   27:     }
   28:     
   29:     return new Charm(input, output);
   30  };
   31  
   ..
   35      self.output = output;
   36      self.pending = [];
   37:     
   38:     if (!output) {
   39          self.emit('error', new Error('output stream required'));
   40      }
   41:     
   42:     if (input && typeof input.fd === 'number' && tty.isatty(input.fd)) {
   43          if (process.stdin.setRawMode) {
   44              process.stdin.setRawMode(true);
   ..
   47          input.resume();
   48      }
   49:     
   50:     if (input) {
   51          input.on('data', function (buf) {
   52              if (self.pending.length) {
   53                  var codes = extractCodes(buf);
   54                  var matched = false;
   55:                 
   56:                 for (var i = 0; i < codes.length; i++) {
   57                      for (var j = 0; j < self.pending.length; j++) {
   58                          var cb = self.pending[j];
   ..
   64                      }
   65                  }
   66:                 
   67:                 if (matched) return;
   68              }
   69:             
   70:             self.emit('data', buf)
   71:             
   72:             if (buf.length === 1) {
   73                  if (buf[0] === 3) self.emit('^C');
   74                  if (buf[0] === 4) self.emit('^D');
   ..
  123      // set relative coordinates
  124      var bufs = [];
  125:     
  126:     if (y < 0) this.up(-y)
  127      else if (y > 0) this.down(y)
  128:     
  129:     if (x > 0) this.right(x)
  130      else if (x < 0) this.left(-x)
  131:     
  132:     return this;
  133  };
  134  
  ...
  232              white : 37
  233          }[color.toLowerCase()];
  234:         
  235:         if (!c) this.emit('error', new Error('Unknown color: ' + color));
  236          this.write(encode('[' + c + 'm'));
  237      }
  ...
  257            white : 47
  258          }[color.toLowerCase()];
  259:         
  260:         if (!c) this.emit('error', new Error('Unknown color: ' + color));
  261          this.write(encode('[' + c + 'm'));
  262      }
  ...
  272      var codes = [];
  273      var start = -1;
  274:     
  275:     for (var i = 0; i < buf.length; i++) {
  276          if (buf[i] === 27) {
  277              if (start >= 0) codes.push(buf.slice(start, i));
  ...
  282          }
  283      }
  284:     
  285:     return codes;
  286  }
  287  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/charm/example/cursor.js:
    5  charm.position(function (x, y) {
    6      console.dir([ x, y ]);
    7:     
    8:     charm.move(7,2);
    9      charm.push();
   10      process.stdout.write('lul');
   11:     
   12:     charm.left(3).up(1).foreground('magenta');
   13      process.stdout.write('v');
   14      charm.left(1).up(1).display('reset');
   15      process.stdout.write('|');
   16:     
   17:     charm.down(3);
   18      charm.pop().background('blue');
   19      process.stdout.write('popped\npow');

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/charm/example/http_spin.js:
    4  http.createServer(function (req, res) {
    5      res.setHeader('content-type', 'text/ansi');
    6:     
    7:     var charm = charmer(res);
    8      charm.reset();
    9:     
   10:     var radius = 10;
   11      var theta = 0;
   12      var points = [];
   ..
   15          var x = 2 + (radius + Math.cos(theta) * radius) * 2;
   16          var y = 2 + radius + Math.sin(theta) * radius;
   17:         
   18:         points.unshift([ x, y ]);
   19          var colors = [ 'red', 'yellow', 'green', 'cyan', 'blue', 'magenta' ];
   20:         
   21:         points.forEach(function (p, i) {
   22              charm.position(p[0], p[1]);
   23              var c = colors[Math.floor(i / 12)];
   ..
   25          });
   26          points = points.slice(0, 12 * colors.length - 1);
   27:         
   28:         theta += Math.PI / 40;
   29      }, 50);
   30:     
   31:     req.connection.on('end', function () {
   32          clearInterval(iv);
   33          charm.destroy();

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/charm/example/lucky.js:
   22      offset ++;
   23  }, 150);
   24:  
   25: charm.on('data', function (buf) {
   26      if (buf[0] === 3) {
   27          clearInterval(iv);

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/charm/example/spin.js:
    9      var x = 2 + (radius + Math.cos(theta) * radius) * 2;
   10      var y = 2 + radius + Math.sin(theta) * radius;
   11:     
   12:     points.unshift([ x, y ]);
   13      var colors = [ 'red', 'yellow', 'green', 'cyan', 'blue', 'magenta' ];
   14:     
   15:     points.forEach(function (p, i) {
   16          charm.position(p[0], p[1]);
   17          var c = colors[Math.floor(i / 12)];
   ..
   19      });
   20      points = points.slice(0, 12 * colors.length - 1);
   21:     
   22:     theta += Math.PI / 40;
   23  }, 50);
   24  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/charm/lib/encode.js:
   10          }
   11      }
   12:     
   13:     return new Buffer([ 0x1b ].concat(bytes(xs)));
   14  };
   15  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/fail.js:
    2  obj = {"a": "[false]",  "b": "[]", c: "[\"a string\"]"}
    3  o = JSON.parse(JSON.stringify(obj))
    4: tr(o).forEach(function(e){ 
    5:     if (this.isLeaf) { 
    6:          //if (e === "[false]"){ this.update(false) } 
    7:          if (e === "[]") { this.update([]);  }
    8      }
    9  })

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/index.js:
   66      var acc = [];
   67      this.forEach(function (x) {
   68:         acc.push(this.path); 
   69:     });
   70      return acc;
   71  };
   ..
   81  Traverse.prototype.clone = function () {
   82      var parents = [], nodes = [];
   83:     
   84:     return (function clone (src) {
   85          for (var i = 0; i < parents.length; i++) {
   86              if (parents[i] === src) {
   ..
   88              }
   89          }
   90:         
   91:         if (typeof src === 'object' && src !== null) {
   92              var dst = copy(src);
   93:             
   94:             parents.push(src);
   95              nodes.push(dst);
   96:             
   97:             forEach(objectKeys(src), function (key) {
   98                  dst[key] = clone(src[key]);
   99              });
  100:             
  101:             parents.pop();
  102              nodes.pop();
  103              return dst;
  ...
  113      var parents = [];
  114      var alive = true;
  115:     
  116:     return (function walker (node_) {
  117          var node = immutable ? copy(node_) : node_;
  118          var modifiers = {};
  119:         
  120:         var keepGoing = true;
  121:         
  122:         var state = {
  123              node : node,
  124              node_ : node_,
  ...
  158              block : function () { keepGoing = false }
  159          };
  160:         
  161:         if (!alive) return state;
  162:         
  163:         function updateState() {
  164              if (typeof state.node === 'object' && state.node !== null) {
  165                  if (!state.keys || state.node_ !== state.node) {
  166                      state.keys = objectKeys(state.node)
  167                  }
  168:                 
  169:                 state.isLeaf = state.keys.length == 0;
  170:                 
  171:                 for (var i = 0; i < parents.length; i++) {
  172                      if (parents[i].node_ === node_) {
  173                          state.circular = parents[i];
  ...
  180                  state.keys = null;
  181              }
  182:             
  183:             state.notLeaf = !state.isLeaf;
  184              state.notRoot = !state.isRoot;
  185          }
  186:         
  187:         updateState();
  188:         
  189:         // use return values to update if defined
  190          var ret = cb.call(state, state.node);
  191          if (ret !== undefined && state.update) state.update(ret);
  192:         
  193:         if (modifiers.before) modifiers.before.call(state, state.node);
  194:         
  195:         if (!keepGoing) return state;
  196:         
  197:         if (typeof state.node == 'object'
  198          && state.node !== null && !state.circular) {
  199              parents.push(state);
  200:             
  201:             updateState();
  202:             
  203:             forEach(state.keys, function (key, i) {
  204                  path.push(key);
  205:                 
  206:                 if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);
  207:                 
  208:                 var child = walker(state.node[key]);
  209                  if (immutable && Object.hasOwnProperty.call(state.node, key)) {
  210                      state.node[key] = child.node;
  211                  }
  212:                 
  213:                 child.isLast = i == state.keys.length - 1;
  214                  child.isFirst = i == 0;
  215:                 
  216:                 if (modifiers.post) modifiers.post.call(state, child);
  217:                 
  218:                 path.pop();
  219              });
  220              parents.pop();
  221          }
  222:         
  223:         if (modifiers.after) modifiers.after.call(state, state.node);
  224:         
  225:         return state;
  226      })(root).node;
  227  }
  ...
  230      if (typeof src === 'object' && src !== null) {
  231          var dst;
  232:         
  233:         if (isArray(src)) {
  234              dst = [];
  235          }
  ...
  268              dst = new T;
  269          }
  270:         
  271:         forEach(objectKeys(src), function (key) {
  272              dst[key] = src[key];
  273          });

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/circular.js:
    6  test('circular', function (t) {
    7      t.plan(1);
    8:     
    9:     var obj = { x : 3 };
   10      obj.y = obj;
   11      traverse(obj).forEach(function (x) {
   ..
   23      var obj = { x : [ 1, 2, 3 ], y : [ 4, 5 ] };
   24      obj.y[2] = obj;
   25:     
   26:     var times = 0;
   27      traverse(obj).forEach(function (x) {
   28          if (this.circular) {
   ..
   37      obj.y[2] = obj;
   38      obj.x.push(obj.y);
   39:     
   40:     var circs = [];
   41      traverse(obj).forEach(function (x) {
   42          if (this.circular) {
   ..
   44          }
   45      });
   46:     
   47:     t.same(circs[0].self.path, [ 'x', 3, 2 ]);
   48      t.same(circs[0].circ.path, []);
   49:      
   50:     t.same(circs[1].self.path, [ 'y', 2 ]);
   51      t.same(circs[1].circ.path, []);
   52:     
   53:     t.same(circs.length, 2);
   54      t.end();
   55  });
   ..
   59      obj.y[2] = obj;
   60      obj.x.push(obj.y);
   61:     
   62:     traverse(obj).forEach(function (x) {
   63          if (this.circular) this.update('...');
   64      });
   65:     
   66:     t.same(obj, { x : [ 1, 2, 3, [ 4, 5, '...' ] ], y : [ 4, 5, '...' ] });
   67      t.end();
   68  });
   ..
   72      obj.y[2] = obj;
   73      obj.x.push(obj.y);
   74:     
   75:     var c = traverse(obj).map(function (x) {
   76          if (this.circular) {
   77              this.update('...');
   78          }
   79      });
   80:     
   81:     t.same(c, { x : [ 1, 2, 3, [ 4, 5, '...' ] ], y : [ 4, 5, '...' ] });
   82      t.end();
   83  });
   ..
   87      obj.y[2] = obj;
   88      obj.x.push(obj.y);
   89:     
   90:     var clone = traverse.clone(obj);
   91      t.ok(obj !== clone);
   92:     
   93:     t.ok(clone.y[2] === clone);
   94      t.ok(clone.y[2] !== obj);
   95      t.ok(clone.x[3][2] === clone);
   ..
  103      var obj = { a : 1, b : 2 };
  104      obj.c = obj;
  105:     
  106:     var scrubbed = traverse(obj).map(function (node) {
  107          if (this.circular) this.remove();
  108      });
  ...
  112      );
  113      t.ok(deepEqual(scrubbed, { a : 1, b : 2 }));
  114:     
  115:     t.equal(obj.c, obj);
  116      t.end();
  117  });

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/date.js:
    4  test('dateEach', function (t) {
    5      var obj = { x : new Date, y : 10, z : 5 };
    6:     
    7:     var counts = {};
    8:     
    9:     traverse(obj).forEach(function (node) {
   10          var t = (node instanceof Date && 'Date') || typeof node;
   11          counts[t] = (counts[t] || 0) + 1;
   12      });
   13:     
   14:     t.same(counts, {
   15          object : 1,
   16          Date : 1,
   ..
   22  test('dateMap', function (t) {
   23      var obj = { x : new Date, y : 10, z : 5 };
   24:     
   25:     var res = traverse(obj).map(function (node) {
   26          if (typeof node === 'number') this.update(node + 100);
   27      });
   28:     
   29:     t.ok(obj.x !== res.x);
   30      t.same(res, {
   31          x : obj.x,

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/equal.js:
    5  test('deepDates', function (t) {
    6      t.plan(2);
    7:     
    8:     t.ok(
    9          deepEqual(
   10              { d : new Date, x : [ 1, 2, 3 ] },
   ..
   13          'dates should be equal'
   14      );
   15:     
   16:     var d0 = new Date;
   17      setTimeout(function () {
   18          t.ok(
   ..
   29      var a = [1];
   30      a.push(a); // a = [ 1, *a ]
   31:     
   32:     var b = [1];
   33      b.push(a); // b = [ 1, [ 1, *a ] ]
   34:     
   35:     t.ok(
   36          !deepEqual(a, b),
   37          'circular ref mount points count towards equality'
   38      );
   39:     
   40:     var c = [1];
   41      c.push(c); // c = [ 1, *c ]
   42      t.ok(
   ..
   44          'circular refs are structurally the same here'
   45      );
   46:     
   47:     var d = [1];
   48      d.push(a); // c = [ 1, [ 1, *d ] ]
   49      t.ok(
   ..
   51          'non-root circular ref structural comparison'
   52      );
   53:     
   54:     t.end();
   55  });
   56  
   ..
   60          'boolean instances are not real booleans'
   61      );
   62:     
   63:     t.ok(
   64          !deepEqual([ new String('x') ], [ 'x' ]),
   65          'string instances are not real strings'
   66      );
   67:     
   68:     t.ok(
   69          !deepEqual([ new Number(4) ], [ 4 ]),
   70          'number instances are not real numbers'
   71      );
   72:     
   73:     t.ok(
   74          deepEqual([ new RegExp('x') ], [ /x/ ]),
   75          'regexp instances are real regexps'
   76      );
   77:     
   78:     t.ok(
   79          !deepEqual([ new RegExp(/./) ], [ /../ ]),
   80          'these regexps aren\'t the same'
   81      );
   82:     
   83:     t.ok(
   84          !deepEqual(
   85              [ function (x) { return x * 2 } ],
   ..
   88          'functions with the same .toString() aren\'t necessarily the same'
   89      );
   90:     
   91:     var f = function (x) { return x * 2 };
   92      t.ok(
   93          deepEqual([ f ], [ f ]),
   94          'these functions are actually equal'
   95      );
   96:     
   97:     t.end();
   98  });
   99  
  ...
  111          'null is not undefined!'
  112      );
  113:     
  114:     t.ok(
  115          !deepEqual([ null ], [ undefined ]),
  116          'undefined is not null!'
  117      );
  118:     
  119:     t.ok(
  120          !deepEqual(
  121              { a : 1, b : 2, c : [ 3, undefined, 5 ] },
  ...
  124          'undefined is not null, however deeply!'
  125      );
  126:     
  127:     t.ok(
  128          !deepEqual(
  129              { a : 1, b : 2, c : [ 3, undefined, 5 ] },
  ...
  132          'null is not undefined, however deeply!'
  133      );
  134:     
  135:     t.ok(
  136          !deepEqual(
  137              { a : 1, b : 2, c : [ 3, undefined, 5 ] },
  ...
  140          'null is not undefined, however deeply!'
  141      );
  142:     
  143:     t.end();
  144  });
  145  
  ...
  147      var xs = [ 1, 2, 3, 4 ];
  148      delete xs[2];
  149:     
  150:     var ys = Object.create(Array.prototype);
  151      ys[0] = 1;
  152      ys[1] = 2;
  153      ys[3] = 4;
  154:     
  155:     t.ok(
  156          deepEqual(xs, ys),
  157          'arrays with deleted elements are only equal to'
  158          + ' arrays with similarly deleted elements'
  159      );
  160:     
  161:     t.ok(
  162          !deepEqual(xs, [ 1, 2, undefined, 4 ]),
  163          'deleted array elements cannot be undefined'
  164      );
  165:     
  166:     t.ok(
  167          !deepEqual(xs, [ 1, 2, null, 4 ]),
  168          'deleted array elements cannot be null'
  169      );
  170:     
  171:     t.end();
  172  });
  173  
  ...
  175      var obj = { a : 1, b : 2, c : 3 };
  176      delete obj.c;
  177:     
  178:     t.ok(
  179          deepEqual(obj, { a : 1, b : 2 }),
  180          'deleted object elements should not show up'
  181      );
  182:     
  183:     t.ok(
  184          !deepEqual(obj, { a : 1, b : 2, c : undefined }),
  185          'deleted object elements are not undefined'
  186      );
  187:     
  188:     t.ok(
  189          !deepEqual(obj, { a : 1, b : 2, c : null }),
  190          'deleted object elements are not null'
  191      );
  192:     
  193:     t.end();
  194  });
  195  
  ...
  198          { a : 1 }, { a : 1, '' : 55 }
  199      ));
  200:     
  201:     t.end();
  202  });
  203  
  ...
  210          'arguments are not arrays'
  211      );
  212:     
  213:     t.ok(
  214          deepEqual(
  215              (function () { return arguments })(4, 5, 6),
  ...
  218          'arguments should equal'
  219      );
  220:     
  221:     t.end();
  222  });
  223  
  ...
  230      t.ok(deepEqual(null, null));
  231      t.ok(!deepEqual(undefined, null));
  232:     
  233:     t.end();
  234  });
  235  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/error.js:
    6      var results = traverse(obj).map(function (node) {});
    7      t.same(results, { message: 'test' });
    8:     
    9:     t.end();
   10  });
   11  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/has.js:
    4  test('has', function (t) {
    5      var obj = { a : 2, b : [ 4, 5, { c : 6 } ] };
    6:     
    7:     t.equal(traverse(obj).has([ 'b', 2, 'c' ]), true)
    8      t.equal(traverse(obj).has([ 'b', 2, 'c', 0 ]), false)
    9      t.equal(traverse(obj).has([ 'b', 2, 'd' ]), false)
   ..
   11      t.equal(traverse(obj).has([ 'a' ]), true)
   12      t.equal(traverse(obj).has([ 'a', 2 ]), false)
   13:     
   14:     t.end();
   15  });
   16  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/instance.js:
    5  test('check instanceof on node elems', function (t) {
    6      var counts = { emitter : 0 };
    7:     
    8:     traverse([ new EventEmitter, 3, 4, { ev : new EventEmitter }])
    9          .forEach(function (node) {
   10              if (node instanceof EventEmitter) counts.emitter ++;
   11          })
   12      ;
   13:     
   14:     t.equal(counts.emitter, 2);
   15:     
   16:     t.end();
   17  });
   18  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/interface.js:
    4  test('interface map', function (t) {
    5      var obj = { a : [ 5,6,7 ], b : { c : [8] } };
    6:     
    7:     t.same(
    8          traverse.paths(obj)
    9              .sort()
   ..
   14           'a a/0 a/1 a/2 b b/c b/c/0'
   15      );
   16:     
   17:     t.same(
   18          traverse.nodes(obj),
   19          [
   ..
   23          ]
   24      );
   25:     
   26:     t.same(
   27          traverse.map(obj, function (node) {
   28              if (typeof node == 'number') {
   ..
   35          { a: '5 6 7', b: { c: '8' } }
   36      );
   37:     
   38:     var nodes = 0;
   39      traverse.forEach(obj, function (node) { nodes ++ });
   40      t.same(nodes, 8);
   41:     
   42:     t.end();
   43  });
   44  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/json.js:
    6      var callbacks = {};
    7      var obj = { moo : function () {}, foo : [2,3,4, function () {}] };
    8:     
    9:     var scrubbed = traverse(obj).map(function (x) {
   10          if (typeof x === 'function') {
   11              callbacks[id] = { id : id, f : x, path : this.path };
   ..
   14          }
   15      });
   16:     
   17:     t.equal(
   18          scrubbed.moo, '[Function]',
   19          'obj.moo replaced with "[Function]"'
   20      );
   21:     
   22:     t.equal(
   23          scrubbed.foo[3], '[Function]',
   24          'obj.foo[3] replaced with "[Function]"'
   25      );
   26:     
   27:     t.same(scrubbed, {
   28          moo : '[Function]',
   29          foo : [ 2, 3, 4, "[Function]" ]
   30      }, 'Full JSON string matches');
   31:     
   32:     t.same(
   33          typeof obj.moo, 'function',
   34          'Original obj.moo still a function'
   35      );
   36:     
   37:     t.same(
   38          typeof obj.foo[3], 'function',
   39          'Original obj.foo[3] still a function'
   40      );
   41:     
   42:     t.same(callbacks, {
   43          54: { id: 54, f : obj.moo, path: [ 'moo' ] },
   44          55: { id: 55, f : obj.foo[3], path: [ 'foo', '3' ] },
   45      }, 'Check the generated callbacks list');
   46:     
   47:     t.end();
   48  });
   49  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/keys.js:
   21          if (this.isLeaf) acc.push(node);
   22      });
   23:     
   24:     t.equal(
   25          acc.join(' '),
   26          '9 30 22',
   27          'Traversal in a custom order'
   28      );
   29:     
   30:     t.end();
   31  });
   32  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/leaves.js:
   12          if (this.isLeaf) acc.push(x);
   13      });
   14:     
   15:     t.equal(
   16          acc.join(' '),
   17          '1 2 3 4 5 6 7 8 9',
   18          'Traversal in the right(?) order'
   19      );
   20:     
   21:     t.end();
   22  });
   23  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/mutability.js:
  102          if (this.isLeaf && x % 2 == 0) this.remove();
  103      });
  104:     
  105:     t.same(obj, { a : 1, c : [ 3 ] });
  106      t.end();
  107  });
  ...
  109  exports.removeNoStop = function() {
  110      var obj = { a : 1, b : 2, c : { d: 3, e: 4 }, f: 5 };
  111:     
  112:     var keys = [];
  113      traverse(obj).forEach(function (x) {
  114          keys.push(this.key)
  ...
  122  exports.removeStop = function() {
  123      var obj = { a : 1, b : 2, c : { d: 3, e: 4 }, f: 5 };
  124:     
  125:     var keys = [];
  126      traverse(obj).forEach(function (x) {
  127          keys.push(this.key)
  ...
  138          if (this.isLeaf && x % 2 == 0) this.remove();
  139      });
  140:     
  141:     t.same(obj, { a : 1, b : 2, c : [ 3, 4 ] });
  142      t.same(res, { a : 1, c : [ 3 ] });
  143      t.end();
  ...
  149          if (this.isLeaf && x % 2 == 0) this.delete();
  150      });
  151:     
  152:     t.ok(!deepEqual(
  153          obj, { a : 1, c : [ 3, undefined ] }
  154      ));
  155:     
  156:     t.ok(deepEqual(
  157          obj, { a : 1, c : [ 3 ] }
  158      ));
  159:     
  160:     t.ok(!deepEqual(
  161          obj, { a : 1, c : [ 3, null ] }
  162      ));
  ...
  166  test('deleteNoStop', function (t) {
  167      var obj = { a : 1, b : 2, c : { d: 3, e: 4 } };
  168:     
  169:     var keys = [];
  170      traverse(obj).forEach(function (x) {
  171          keys.push(this.key)
  ...
  179  test('deleteStop', function (t) {
  180      var obj = { a : 1, b : 2, c : { d: 3, e: 4 } };
  181:     
  182:     var keys = [];
  183      traverse(obj).forEach(function (x) {
  184          keys.push(this.key)
  ...
  195          if (this.isLeaf && x % 2 == 0) this.delete();
  196      });
  197:     
  198:     t.ok(!deepEqual(
  199          obj, { a : 1, c : [ 3, undefined, 5 ] }
  200      ));
  201:     
  202:     t.ok(deepEqual(
  203          obj, { a : 1, c : [ 3 ,, 5 ] }
  204      ));
  205:     
  206:     t.ok(!deepEqual(
  207          obj, { a : 1, c : [ 3, null, 5 ] }
  208      ));
  209:     
  210:     t.ok(!deepEqual(
  211          obj, { a : 1, c : [ 3, 5 ] }
  212      ));
  213:     
  214:     t.end();
  215  });
  216  
  ...
  220          if (this.isLeaf && x % 2 == 0) this.delete();
  221      });
  222:     
  223:     t.ok(deepEqual(
  224          obj,
  225          { a : 1, b : 2, c : [ 3, 4 ] }
  226      ));
  227:     
  228:     var xs = [ 3, 4 ];
  229      delete xs[1];
  230:     
  231:     t.ok(deepEqual(
  232          res, { a : 1, c : xs }
  233      ));
  234:     
  235:     t.ok(deepEqual(
  236          res, { a : 1, c : [ 3, ] }
  237      ));
  238:     
  239:     t.ok(deepEqual(
  240          res, { a : 1, c : [ 3 ] }
  241      ));
  242:     
  243:     t.end();
  244  });
  245  
  ...
  249          if (this.isLeaf && x % 2 == 0) this.delete();
  250      });
  251:     
  252:     t.ok(deepEqual(
  253          obj,
  254          { a : 1, b : 2, c : [ 3, 4, 5 ] }
  255      ));
  256:     
  257:     var xs = [ 3, 4, 5 ];
  258      delete xs[1];
  259:     
  260:     t.ok(deepEqual(
  261          res, { a : 1, c : xs }
  262      ));
  263:     
  264:     t.ok(!deepEqual(
  265          res, { a : 1, c : [ 3, 5 ] }
  266      ));
  267:     
  268:     t.ok(deepEqual(
  269          res, { a : 1, c : [ 3 ,, 5 ] }
  270      ));
  271:     
  272:     t.end();
  273  });
  274  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/negative.js:
    7          if (x < 0) this.update(x + 128);
    8      });
    9:     
   10:     t.same(fixed,
   11          [ 5, 6, 125, [ 7, 8, 126, 1 ], { f: 10, g: 115 } ],
   12          'Negative values += 128'
   13      );
   14:     
   15:     t.same(obj,
   16          [ 5, 6, -3, [ 7, 8, -2, 1 ], { f: 10, g: -13 } ],
   17          'Original references not modified'
   18      );
   19:     
   20:     t.end();
   21  });
   22  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/obj.js:
    4  test('traverse an object with nested functions', function (t) {
    5      t.plan(1);
    6:     
    7:     function Cons (x) {
    8          t.equal(x, 10)
    9      };

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/siblings.js:
    4  test('siblings', function (t) {
    5      var obj = { a : 1, b : 2, c : [ 4, 5, 6 ] };
    6:     
    7:     var res = traverse(obj).reduce(function (acc, x) {
    8          var p = '/' + this.path.join('/');
    9          if (this.parent) {
   ..
   23          return acc;
   24      }, {});
   25:     
   26:     t.same(res, {
   27          '/' : { siblings : [], key : undefined, index : -1 },
   28          '/a' : { siblings : [ 'a', 'b', 'c' ], key : 'a', index : 0 },
   ..
   33          '/c/2' : { siblings : [ '0', '1', '2' ], key : '2', index : 2 }
   34      });
   35:     
   36:     t.end();
   37  });
   38  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/stop.js:
   10          }
   11      });
   12:     
   13:     t.equal(visits, 5);
   14      t.end();
   15  });
   ..
   22          }
   23      }).join('');
   24:     
   25:     t.equal(s, 'ABCDEfghij');
   26      t.end();
   27  });
   ..
   39          return acc;
   40      }, []);
   41:     
   42:     t.same(xs, [ 4, 5, 6 ]);
   43      t.end();
   44  });

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/stringify.js:
    4  test('stringify', function (t) {
    5      var obj = [ 5, 6, -3, [ 7, 8, -2, 1 ], { f : 10, g : -13 } ];
    6:     
    7:     var s = '';
    8      traverse(obj).forEach(function (node) {
    9          if (Array.isArray(node)) {
   ..
   31          }
   32      });
   33:     
   34:     t.equal(s, JSON.stringify(obj));
   35      t.end();
   36  });

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/subexpr.js:
    9          }
   10      });
   11:     
   12:     t.same(obj, [ 'a', 4, 'b', 5, 'c', 6 ]);
   13      t.same(r, [
   14          'a', [ 3.9, 4, 4.1 ],
   ..
   27          }
   28      });
   29:     
   30:     t.same(r, [
   31          [ [ [ [ [ 5 ] ] ] ] ],
   32          [ [ [ [ 5 ] ] ] ],

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/super_deep.js:
    8      var a1 = make();
    9      t.ok(deepEqual(a0, a1));
   10:     
   11:     a0.c.d.moo = true;
   12      t.ok(!deepEqual(a0, a1));
   13:     
   14:     a1.c.d.moo = true;
   15      t.ok(deepEqual(a0, a1));
   16:     
   17:     // TODO: this one
   18      //a0.c.a = a1;
   19      //t.ok(!deepEqual(a0, a1));
   ..
   27      var d = { self : 'd' };
   28      var e = { self : 'e' };
   29:     
   30:     a.a = a;
   31      a.b = b;
   32      a.c = c;
   33:     
   34:     b.a = a;
   35      b.b = b;
   36      b.c = c;
   37:     
   38:     c.a = a;
   39      c.b = b;
   40      c.c = c;
   41      c.d = d;
   42:     
   43:     d.a = a;
   44      d.b = b;
   45      d.c = c;
   46      d.d = d;
   47      d.e = e;
   48:     
   49:     e.a = a;
   50      e.b = b;
   51      e.c = c;
   52      e.d = d;
   53      e.e = e;
   54:     
   55:     return a;
   56  }
   57  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/test/lib/deep_equal.js:
    7          );
    8      }
    9:     
   10:     var equal = true;
   11      var node = b;
   12:     
   13:     traverse(a).forEach(function (y) {
   14          var notEqual = (function () {
   15              equal = false;
   ..
   17              return undefined;
   18          }).bind(this);
   19:         
   20:         //if (node === undefined || node === null) return notEqual();
   21:         
   22:         if (!this.isRoot) {
   23          /*
   24              if (!Object.hasOwnProperty.call(node, this.key)) {
   ..
   29              node = node[this.key];
   30          }
   31:         
   32:         var x = node;
   33:         
   34:         this.post(function () {
   35              node = x;
   36          });
   37:         
   38:         var toS = function (o) {
   39              return Object.prototype.toString.call(o);
   40          };
   41:         
   42:         if (this.circular) {
   43              if (traverse(b).get(this.circular.path) !== x) notEqual();
   44          }
   ..
   92          }
   93      });
   94:     
   95:     return equal;
   96  };
   97  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/testling/leaves.js:
    9          d : { e : [7,8], f : 9 }
   10      };
   11:     
   12:     var acc = [];
   13      traverse(obj).forEach(function (x) {
   14          if (this.isLeaf) acc.push(x);
   15      });
   16:     
   17:     t.deepEqual(
   18          acc, [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ],
   19          'traversal in the proper order'

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/difflet/test/html.js:
   22          }
   23      });
   24:     
   25:     var stream = diff(
   26          { yy : 6, zz : 5, a : [1,2,3], fn : function qqq () {} },
   27          {
   ..
   31          }
   32      );
   33:     
   34:     var data = ''
   35      stream.on('data', function (buf) { data += buf });
   36      stream.on('end', function () {
   ..
   48  test('compare html output', function (t) {
   49      t.plan(1);
   50:     
   51:     var diff = difflet({
   52          start : function (t, s) {
   53              s.write('<' + tags[t] + '>');
   ..
   60          }
   61      });
   62:     
   63:     var data = diff.compare(
   64          { yy : 6, zz : 5, a : [1,2,3], fn : function qqq () {} },
   65          {
   ..
   69          }
   70      );
   71:     
   72:     t.equal(data,
   73          '{&quot;a&quot;:[1,2,3,<g>[4]</g>,<g>&quot;z&quot;</g>,'
   74          + '<g>/beep/</g>,<g>&lt;Buffer 00 01 02&gt;</g>],'

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/mkdirp/test/mkdirp.js:
    9      var y = Math.floor(Math.random() * Math.pow(16,4)).toString(16);
   10      var z = Math.floor(Math.random() * Math.pow(16,4)).toString(16);
   11:     
   12:     var file = '/tmp/' + [x,y,z].join('/');
   13:     
   14:     mkdirp(file, 0755, function (err) {
   15          if (err) t.fail(err);
   16          else path.exists(file, function (ex) {

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/mkdirp/test/perm.js:
    7      t.plan(2);
    8      var file = '/tmp/' + (Math.random() * (1<<30)).toString(16);
    9:     
   10:     mkdirp(file, 0755, function (err) {
   11          if (err) t.fail(err);
   12          else path.exists(file, function (ex) {

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/mkdirp/test/perm_sync.js:
    7      t.plan(2);
    8      var file = '/tmp/' + (Math.random() * (1<<30)).toString(16) + '.json';
    9:     
   10:     mkdirp.sync(file, 0755);
   11      path.exists(file, function (ex) {
   12          if (!ex) t.fail('file not created')
   ..
   24  test('sync root perm', function (t) {
   25      t.plan(1);
   26:     
   27:     var file = '/tmp';
   28      mkdirp.sync(file, 0755);
   29      path.exists(file, function (ex) {

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/mkdirp/test/race.js:
    7      t.plan(4);
    8      var ps = [ '', 'tmp' ];
    9:     
   10:     for (var i = 0; i < 25; i++) {
   11          var dir = Math.floor(Math.random() * Math.pow(16,4)).toString(16);
   12          ps.push(dir);
   13      }
   14      var file = ps.join('/');
   15:     
   16:     var res = 2;
   17      mk(file, function () {
   18          if (--res === 0) t.end();
   19      });
   20:     
   21:     mk(file, function () {
   22          if (--res === 0) t.end();
   23      });
   24:     
   25:     function mk (file, cb) {
   26          mkdirp(file, 0755, function (err) {
   27              if (err) t.fail(err);

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/mkdirp/test/rel.js:
    9      var y = Math.floor(Math.random() * Math.pow(16,4)).toString(16);
   10      var z = Math.floor(Math.random() * Math.pow(16,4)).toString(16);
   11:     
   12:     var cwd = process.cwd();
   13      process.chdir('/tmp');
   14:     
   15:     var file = [x,y,z].join('/');
   16:     
   17:     mkdirp(file, 0755, function (err) {
   18          if (err) t.fail(err);
   19          else path.exists(file, function (ex) {

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/mkdirp/test/umask.js:
    9      var y = Math.floor(Math.random() * Math.pow(16,4)).toString(16);
   10      var z = Math.floor(Math.random() * Math.pow(16,4)).toString(16);
   11:     
   12:     var file = '/tmp/' + [x,y,z].join('/');
   13:     
   14:     mkdirp(file, function (err) {
   15          if (err) t.fail(err);
   16          else path.exists(file, function (ex) {

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/index.js:
   29  
   30    var seenLines = [],
   31:       lines = 
   32:       missing.sort(function(lhs, rhs) {
   33          return lhs.node[0].start.line < rhs.node[0].start.line ? -1 :
   34                 lhs.node[0].start.line > rhs.node[0].start.line ? 1  :

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/index.js:
   12      this.sources = [];
   13      this.nodes = [];
   14:     
   15:     this.names = {
   16          call : burrito.generateName(6),
   17          expr : burrito.generateName(6),
   ..
   33      var nodes = this.nodes;
   34      var names = this.names;
   35:     
   36:     return burrito(src, function (node) {
   37          var i = nodes.length;
   38:         
   39:         if (node.name === 'call') {
   40              nodes.push(node);
   41              node.wrap(names.call + '(' + i + ')(%s)');
   ..
   68              node.wrap(names.expr + '(' + i + ')(%s)');
   69          }
   70:         
   71:         if (i !== nodes.length) {
   72              node.id = i;
   73          }
   ..
   77  Bunker.prototype.assign = function (context) {
   78      if (!context) context = {};
   79:     
   80:     var self = this;
   81      var stack = [];
   82:     
   83:     context[self.names.call] = function (i) {
   84          var node = self.nodes[i];
   85          stack.unshift(node);
   86          self.emit('node', node, stack);
   87:         
   88:         return function (expr) {
   89              stack.shift();
   90              return expr;
   91          };
   92      };
   93:     
   94:     context[self.names.expr] = function (i) {
   95          var node = self.nodes[i];
   96          self.emit('node', node, stack);
   97:         
   98:         return function (expr) {
   99              return expr;
  100          };
  101      };
  102:     
  103:     context[self.names.stat] = function (i) {
  104          var node = self.nodes[i];
  105          self.emit('node', node, stack);
  106      };
  107:     
  108:     return context;
  109  };
  110:     
  111: Bunker.prototype.run = function (context) {
  112      var src = this.compile();
  113      vm.runInNewContext(src, this.assign(context));
  114:     
  115:     return this;
  116  };
  117  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/example/prof.js:
   10          return x;
   11      }
   12:     
   13:     beep();
   14:     
   15: } + ')()');
   16  
   17  var counts = {};
   ..
   22      }
   23      counts[node.id].times ++;
   24:     
   25:     var now = Date.now();
   26:     
   27:     if (last.id !== undefined) {
   28          counts[last.id].elapsed += last.
   29      }
   30:     
   31:     if (node.name === 'call') {
   32          var start = now;
   33:         
   34:         last.id = node.id;
   35          counts[node.id].elapsed += Date.now() - start;
   36      }

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/index.js:
    3  var parse = function (expr) {
    4      if (typeof expr !== 'string') throw 'expression should be a string';
    5:     
    6:     try {
    7          var ast = parser.parse.apply(null, arguments);
    8      }
    .
   13          || err.pos === undefined
   14          ) { throw err }
   15:         
   16:         var e = new SyntaxError(
   17              err.message
   18              + '\n  at line ' + err.line + ':' + err.col + ' in expression:\n\n'
   19              + '  ' + expr.split(/\r?\n/)[err.line]
   20          );
   21:         
   22:         e.original = err;
   23          e.line = err.line;
   24          e.col = err.col;
   ..
   41          : parse(code.toString(), false, true)
   42      ;
   43:     
   44:     var ast_ = traverse(ast).map(function mapper () {
   45          wrapNode(this, cb);
   46      });
   47:     
   48:     return deparse(parse(deparse(ast_)), true);
   49  };
   50  
   51  var wrapNode = burrito.wrapNode = function (state, cb) {
   52      var node = state.node;
   53:     
   54:     var ann = Array_isArray(node) && node[0]
   55      && typeof node[0] === 'object' && node[0].name
   56          ? node[0]
   57          : null
   58      ;
   59:     
   60:     if (!ann) return undefined;
   61:     
   62:     var self = {
   63          name : ann.name,
   64          node : node,
   ..
   68          state : state
   69      };
   70:     
   71:     self.wrap = function (s) {
   72          var subsrc = deparse(
   73              traverse(node).map(function (x) {
   ..
   75              })
   76          );
   77:         
   78:         if (self.name === 'binary') {
   79              var a = deparse(traverse(node[2]).map(function (x) {
   80                  if (!this.isRoot) wrapNode(this, cb)
   ..
   84              }));
   85          }
   86:         
   87:         var src = '';
   88:         
   89:         if (typeof s === 'function') {
   90              if (self.name === 'binary') {
   91                  src = s(subsrc, a, b);
   ..
  101                  })
  102              ;
  103:             
  104:             if (self.name === 'binary') {
  105                  src = src
  106                      .replace(/%a/g, function () { return a })
  ...
  109              }
  110          }
  111:         
  112:         var expr = parse(src);
  113          state.update(expr, true);
  114      };
  115:     
  116:     var cache = {};
  117:     
  118:     self.parent = state.isRoot ? null : function () {
  119          if (!cache.parent) {
  120              var s = state;
  ...
  124                  if (s) x = wrapNode(s);
  125              } while (s && !x);
  126:             
  127:             cache.parent = x;
  128          }
  129:         
  130:         return cache.parent;
  131      };
  132:     
  133:     self.source = function () {
  134          if (!cache.source) cache.source = deparse(node);
  135          return cache.source;
  136      };
  137:     
  138:     self.label = function () {
  139          return burrito.label(self);
  140      };
  141:     
  142:     if (cb) cb.call(state, self);
  143:     
  144:     if (self.node[0].name === 'conditional') {
  145          self.wrap('[%s][0]');
  146      }
  147:     
  148:     return self;
  149  }
  150  
  ...
  152      if (!cb) { cb = context; context = {} };
  153      if (!context) context = {};
  154:     
  155:     var src = burrito(code, cb);
  156      return vm.runInNewContext(src, context);
  157  };
  ...
  161      var lower = '$'.charCodeAt(0);
  162      var upper = 'z'.charCodeAt(0);
  163:     
  164:     while (name.length < len) {
  165          var c = String.fromCharCode(Math.floor(
  166              Math.random() * (upper - lower + 1) + lower
  ...
  168          if ((name + c).match(/^[A-Za-z_$][A-Za-z0-9_$]*$/)) name += c;
  169      }
  170:     
  171:     return name;
  172  };
  173  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/example/web/bs.js:
   22          'vm': true
   23      };
   24:     
   25:     return function (x, cwd) {
   26          if (!cwd) cwd = '/';
   27:         
   28:         if (core[x]) return x;
   29          var path = require.modules.path();
   30          var y = cwd || '.';
   31:         
   32:         if (x.match(/^(?:\.\.?\/|\/)/)) {
   33              var m = loadAsFileSync(path.resolve(y, x))
   34                  || loadAsDirectorySync(path.resolve(y, x));
   35              if (m) return m;
   36          }
   37:         
   38:         var n = loadNodeModulesSync(x, y);
   39          if (n) return n;
   40:         
   41:         throw new Error("Cannot find module '" + x + "'");
   42:         
   43:         function loadAsFileSync (x) {
   44              if (require.modules[x]) {
   45                  return x;
   46              }
   47:             
   48:             for (var i = 0; i < require.extensions.length; i++) {
   49                  var ext = require.extensions[i];
   50                  if (require.modules[x + ext]) return x + ext;
   51              }
   52          }
   53:         
   54:         function loadAsDirectorySync (x) {
   55              x = x.replace(/\/+$/, '');
   56              var pkgfile = x + '/package.json';
   ..
   71                  }
   72              }
   73:             
   74:             return loadAsFileSync(x + '/index');
   75          }
   76:         
   77:         function loadNodeModulesSync (x, start) {
   78              var dirs = nodeModulesPathsSync(start);
   79              for (var i = 0; i < dirs.length; i++) {
   ..
   84                  if (n) return n;
   85              }
   86:             
   87:             var m = loadAsFileSync(x);
   88              if (m) return m;
   89          }
   90:         
   91:         function nodeModulesPathsSync (start) {
   92              var parts;
   93              if (start === '/') parts = [ '' ];
   94              else parts = path.normalize(start).split('/');
   95:             
   96:             var dirs = [];
   97              for (var i = parts.length - 1; i >= 0; i--) {
   98                  if (parts[i] === 'node_modules') continue;
   ..
  100                  dirs.push(dir);
  101              }
  102:             
  103:             return dirs;
  104          }
  105      };
  ...
  116      }
  117      var basedir = path.dirname(res);
  118:     
  119:     var keys = Object_keys(require.modules);
  120:     
  121:     for (var i = 0; i < keys.length; i++) {
  122          var key = keys[i];
  123          if (key.slice(0, basedir.length + 1) === basedir + '/') {
  ...
  157      var __dirname = ".";
  158      var __filename = "path";
  159:     
  160:     var require = function (file) {
  161          return __require(file, ".");
  162      };
  163:     
  164:     require.resolve = function (file) {
  165          return __require.resolve(name, ".");
  166      };
  167:     
  168:     require.modules = __require.modules;
  169      __require.modules["path"]._cached = module.exports;
  170:     
  171:     (function () {
  172          function filter (xs, fn) {
  173      var res = [];
  ...
  260      path += '/';
  261    }
  262:   
  263:   return (isAbsolute ? '/' : '') + path;
  264  };
  265  
  ...
  306  ;
  307      }).call(module.exports);
  308:     
  309:     __require.modules["path"]._cached = module.exports;
  310      return module.exports;
  311  };
  ...
  316      var __dirname = "/node_modules/burrito";
  317      var __filename = "/node_modules/burrito/package.json";
  318:     
  319:     var require = function (file) {
  320          return __require(file, "/node_modules/burrito");
  321      };
  322:     
  323:     require.resolve = function (file) {
  324          return __require.resolve(name, "/node_modules/burrito");
  325      };
  326:     
  327:     require.modules = __require.modules;
  328      __require.modules["/node_modules/burrito/package.json"]._cached = module.exports;
  329:     
  330:     (function () {
  331          module.exports = {"name":"burrito","description":"Wrap up expressions with a trace function while walking the AST with rice and beans on the side","version":"0.2.8","repository":{"type":"git","url":"git://github.com/substack/node-burrito.git"},"main":"./index.js","keywords":["trace","ast","walk","syntax","source","tree","uglify"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{"traverse":">=0.5.1 <0.6","uglify-js":"1.0.4"},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"BSD","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"}};
  332      }).call(module.exports);
  333:     
  334:     __require.modules["/node_modules/burrito/package.json"]._cached = module.exports;
  335      return module.exports;
  336  };
  ...
  341      var __dirname = "/node_modules/burrito/node_modules/uglify-js";
  342      var __filename = "/node_modules/burrito/node_modules/uglify-js/package.json";
  343:     
  344:     var require = function (file) {
  345          return __require(file, "/node_modules/burrito/node_modules/uglify-js");
  346      };
  347:     
  348:     require.resolve = function (file) {
  349          return __require.resolve(name, "/node_modules/burrito/node_modules/uglify-js");
  350      };
  351:     
  352:     require.modules = __require.modules;
  353      __require.modules["/node_modules/burrito/node_modules/uglify-js/package.json"]._cached = module.exports;
  354:     
  355:     (function () {
  356          module.exports = {"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.4","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"}};
  357      }).call(module.exports);
  358:     
  359:     __require.modules["/node_modules/burrito/node_modules/uglify-js/package.json"]._cached = module.exports;
  360      return module.exports;
  361  };
  ...
  366      var __dirname = "/node_modules/burrito/node_modules/uglify-js";
  367      var __filename = "/node_modules/burrito/node_modules/uglify-js/uglify-js.js";
  368:     
  369:     var require = function (file) {
  370          return __require(file, "/node_modules/burrito/node_modules/uglify-js");
  371      };
  372:     
  373:     require.resolve = function (file) {
  374          return __require.resolve(name, "/node_modules/burrito/node_modules/uglify-js");
  375      };
  376:     
  377:     require.modules = __require.modules;
  378      __require.modules["/node_modules/burrito/node_modules/uglify-js/uglify-js.js"]._cached = module.exports;
  379:     
  380:     (function () {
  381          //convienence function(src, [options]);
  382  function uglify(orig_code, options){
  ...
  397  module.exports = uglify;
  398      }).call(module.exports);
  399:     
  400:     __require.modules["/node_modules/burrito/node_modules/uglify-js/uglify-js.js"]._cached = module.exports;
  401      return module.exports;
  402  };
  ...
  407      var __dirname = "/node_modules/burrito/node_modules/uglify-js/lib";
  408      var __filename = "/node_modules/burrito/node_modules/uglify-js/lib/parse-js.js";
  409:     
  410:     var require = function (file) {
  411          return __require(file, "/node_modules/burrito/node_modules/uglify-js/lib");
  412      };
  413:     
  414:     require.resolve = function (file) {
  415          return __require.resolve(name, "/node_modules/burrito/node_modules/uglify-js/lib");
  416      };
  417:     
  418:     require.modules = __require.modules;
  419      __require.modules["/node_modules/burrito/node_modules/uglify-js/lib/parse-js.js"]._cached = module.exports;
  420:     
  421:     (function () {
  422          /***********************************************************************
  423  
  ...
 1740  ;
 1741      }).call(module.exports);
 1742:     
 1743:     __require.modules["/node_modules/burrito/node_modules/uglify-js/lib/parse-js.js"]._cached = module.exports;
 1744      return module.exports;
 1745  };
 ....
 1750      var __dirname = "/node_modules/burrito/node_modules/uglify-js/lib";
 1751      var __filename = "/node_modules/burrito/node_modules/uglify-js/lib/process.js";
 1752:     
 1753:     var require = function (file) {
 1754          return __require(file, "/node_modules/burrito/node_modules/uglify-js/lib");
 1755      };
 1756:     
 1757:     require.resolve = function (file) {
 1758          return __require.resolve(name, "/node_modules/burrito/node_modules/uglify-js/lib");
 1759      };
 1760:     
 1761:     require.modules = __require.modules;
 1762      __require.modules["/node_modules/burrito/node_modules/uglify-js/lib/process.js"]._cached = module.exports;
 1763:     
 1764:     (function () {
 1765          /***********************************************************************
 1766  
 ....
 3531  ;
 3532      }).call(module.exports);
 3533:     
 3534:     __require.modules["/node_modules/burrito/node_modules/uglify-js/lib/process.js"]._cached = module.exports;
 3535      return module.exports;
 3536  };
 ....
 3541      var __dirname = "/node_modules/burrito/node_modules/uglify-js/lib";
 3542      var __filename = "/node_modules/burrito/node_modules/uglify-js/lib/squeeze-more.js";
 3543:     
 3544:     var require = function (file) {
 3545          return __require(file, "/node_modules/burrito/node_modules/uglify-js/lib");
 3546      };
 3547:     
 3548:     require.resolve = function (file) {
 3549          return __require.resolve(name, "/node_modules/burrito/node_modules/uglify-js/lib");
 3550      };
 3551:     
 3552:     require.modules = __require.modules;
 3553      __require.modules["/node_modules/burrito/node_modules/uglify-js/lib/squeeze-more.js"]._cached = module.exports;
 3554:     
 3555:     (function () {
 3556          var jsp = require("./parse-js"),
 3557      pro = require("./process"),
 ....
 3578  ;
 3579      }).call(module.exports);
 3580:     
 3581:     __require.modules["/node_modules/burrito/node_modules/uglify-js/lib/squeeze-more.js"]._cached = module.exports;
 3582      return module.exports;
 3583  };
 ....
 3588      var __dirname = "/node_modules/burrito/node_modules/traverse";
 3589      var __filename = "/node_modules/burrito/node_modules/traverse/package.json";
 3590:     
 3591:     var require = function (file) {
 3592          return __require(file, "/node_modules/burrito/node_modules/traverse");
 3593      };
 3594:     
 3595:     require.resolve = function (file) {
 3596          return __require.resolve(name, "/node_modules/burrito/node_modules/traverse");
 3597      };
 3598:     
 3599:     require.modules = __require.modules;
 3600      __require.modules["/node_modules/burrito/node_modules/traverse/package.json"]._cached = module.exports;
 3601:     
 3602:     (function () {
 3603          module.exports = {"name":"traverse","version":"0.5.0","description":"Traverse and transform objects by visiting every node on a recursive walk","author":"James Halliday","license":"MIT/X11","main":"./index","repository":{"type":"git","url":"http://github.com/substack/js-traverse.git"},"devDependencies":{"expresso":"0.7.x"},"scripts":{"test":"expresso"}};
 3604      }).call(module.exports);
 3605:     
 3606:     __require.modules["/node_modules/burrito/node_modules/traverse/package.json"]._cached = module.exports;
 3607      return module.exports;
 3608  };
 ....
 3613      var __dirname = "/node_modules/burrito/node_modules/traverse";
 3614      var __filename = "/node_modules/burrito/node_modules/traverse/index.js";
 3615:     
 3616:     var require = function (file) {
 3617          return __require(file, "/node_modules/burrito/node_modules/traverse");
 3618      };
 3619:     
 3620:     require.resolve = function (file) {
 3621          return __require.resolve(name, "/node_modules/burrito/node_modules/traverse");
 3622      };
 3623:     
 3624:     require.modules = __require.modules;
 3625      __require.modules["/node_modules/burrito/node_modules/traverse/index.js"]._cached = module.exports;
 3626:     
 3627:     (function () {
 3628          module.exports = Traverse;
 3629  function Traverse (obj) {
 ....
 3679      var acc = [];
 3680      this.forEach(function (x) {
 3681:         acc.push(this.path); 
 3682:     });
 3683      return acc;
 3684  };
 ....
 3694  Traverse.prototype.clone = function () {
 3695      var parents = [], nodes = [];
 3696:     
 3697:     return (function clone (src) {
 3698          for (var i = 0; i < parents.length; i++) {
 3699              if (parents[i] === src) {
 ....
 3701              }
 3702          }
 3703:         
 3704:         if (typeof src === 'object' && src !== null) {
 3705              var dst = copy(src);
 3706:             
 3707:             parents.push(src);
 3708              nodes.push(dst);
 3709:             
 3710:             forEach(Object_keys(src), function (key) {
 3711                  dst[key] = clone(src[key]);
 3712              });
 3713:             
 3714:             parents.pop();
 3715              nodes.pop();
 3716              return dst;
 ....
 3726      var parents = [];
 3727      var alive = true;
 3728:     
 3729:     return (function walker (node_) {
 3730          var node = immutable ? copy(node_) : node_;
 3731          var modifiers = {};
 3732:         
 3733:         var keepGoing = true;
 3734:         
 3735:         var state = {
 3736              node : node,
 3737              node_ : node_,
 ....
 3769              block : function () { keepGoing = false }
 3770          };
 3771:         
 3772:         if (!alive) return state;
 3773:         
 3774:         if (typeof node === 'object' && node !== null) {
 3775              state.keys = Object_keys(node);
 3776:             
 3777:             state.isLeaf = state.keys.length == 0;
 3778:             
 3779:             for (var i = 0; i < parents.length; i++) {
 3780                  if (parents[i].node_ === node_) {
 3781                      state.circular = parents[i];
 ....
 3787              state.isLeaf = true;
 3788          }
 3789:         
 3790:         state.notLeaf = !state.isLeaf;
 3791          state.notRoot = !state.isRoot;
 3792:         
 3793:         // use return values to update if defined
 3794          var ret = cb.call(state, state.node);
 3795          if (ret !== undefined && state.update) state.update(ret);
 3796:         
 3797:         if (modifiers.before) modifiers.before.call(state, state.node);
 3798:         
 3799:         if (!keepGoing) return state;
 3800:         
 3801:         if (typeof state.node == 'object'
 3802          && state.node !== null && !state.circular) {
 3803              parents.push(state);
 3804:             
 3805:             forEach(state.keys, function (key, i) {
 3806                  path.push(key);
 3807:                 
 3808:                 if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);
 3809:                 
 3810:                 var child = walker(state.node[key]);
 3811                  if (immutable && Object.hasOwnProperty.call(state.node, key)) {
 3812                      state.node[key] = child.node;
 3813                  }
 3814:                 
 3815:                 child.isLast = i == state.keys.length - 1;
 3816                  child.isFirst = i == 0;
 3817:                 
 3818:                 if (modifiers.post) modifiers.post.call(state, child);
 3819:                 
 3820:                 path.pop();
 3821              });
 3822              parents.pop();
 3823          }
 3824:         
 3825:         if (modifiers.after) modifiers.after.call(state, state.node);
 3826:         
 3827:         return state;
 3828      })(root).node;
 3829  }
 ....
 3832      if (typeof src === 'object' && src !== null) {
 3833          var dst;
 3834:         
 3835:         if (Array_isArray(src)) {
 3836              dst = [];
 3837          }
 ....
 3858              if (!dst.__proto__) dst.__proto__ = proto;
 3859          }
 3860:         
 3861:         forEach(Object_keys(src), function (key) {
 3862              dst[key] = src[key];
 3863          });
 ....
 3893  ;
 3894      }).call(module.exports);
 3895:     
 3896:     __require.modules["/node_modules/burrito/node_modules/traverse/index.js"]._cached = module.exports;
 3897      return module.exports;
 3898  };
 ....
 3903      var __dirname = ".";
 3904      var __filename = "vm";
 3905:     
 3906:     var require = function (file) {
 3907          return __require(file, ".");
 3908      };
 3909:     
 3910:     require.resolve = function (file) {
 3911          return __require.resolve(name, ".");
 3912      };
 3913:     
 3914:     require.modules = __require.modules;
 3915      __require.modules["vm"]._cached = module.exports;
 3916:     
 3917:     (function () {
 3918          var Object_keys = function (obj) {
 3919      if (Object.keys) return Object.keys(obj)
 ....
 3951  Script.prototype.runInNewContext = function (context) {
 3952      if (!context) context = {};
 3953:     
 3954:     if (!iframeCapable) {
 3955          var keys = Object_keys(context);
 3956          var args = [];
 ....
 3958              args.push(context[keys[i]]);
 3959          }
 3960:         
 3961:         var fn = Function(keys, this.code);
 3962          return fn.apply(null, args);
 3963      }
 3964:     
 3965:     document.body.appendChild(iframe);
 3966:     
 3967:     var win = iframe.contentWindow
 3968          || (window.frames && window.frames[window.frames.length - 1])
 3969          || window[window.length - 1]
 3970      ;
 3971:     
 3972:     forEach(Object_keys(context), function (key) {
 3973          win[key] = context[key];
 3974          iframe[key] = context[key];
 3975      });
 3976:      
 3977:     if (win.eval) {
 3978          // chrome and ff can just .eval()
 3979          var res = win.eval(this.code);
 ....
 3992          }
 3993      }
 3994:     
 3995:     forEach(Object_keys(win), function (key) {
 3996          context[key] = win[key];
 3997      });
 3998:     
 3999:     document.body.removeChild(iframe);
 4000:     
 4001:     return res;
 4002  };
 4003  
 ....
 4035  ;
 4036      }).call(module.exports);
 4037:     
 4038:     __require.modules["vm"]._cached = module.exports;
 4039      return module.exports;
 4040  };
 ....
 4045      var __dirname = "/node_modules/jsonify";
 4046      var __filename = "/node_modules/jsonify/package.json";
 4047:     
 4048:     var require = function (file) {
 4049          return __require(file, "/node_modules/jsonify");
 4050      };
 4051:     
 4052:     require.resolve = function (file) {
 4053          return __require.resolve(name, "/node_modules/jsonify");
 4054      };
 4055:     
 4056:     require.modules = __require.modules;
 4057      __require.modules["/node_modules/jsonify/package.json"]._cached = module.exports;
 4058:     
 4059:     (function () {
 4060          module.exports = {"name":"jsonify","version":"0.0.0","description":"JSON without touching any globals","main":"index.js","directories":{"lib":".","test":"test"},"devDependencies":{"tap":"0.0.x","garbage":"0.0.x"},"scripts":{"test":"tap test"},"repository":{"type":"git","url":"http://github.com/substack/jsonify.git"},"keywords":["json","browser"],"author":{"name":"Douglas Crockford","url":"http://crockford.com/"},"license":"Public Domain"};
 4061      }).call(module.exports);
 4062:     
 4063:     __require.modules["/node_modules/jsonify/package.json"]._cached = module.exports;
 4064      return module.exports;
 4065  };
 ....
 4070      var __dirname = "/node_modules/jsonify";
 4071      var __filename = "/node_modules/jsonify/index.js";
 4072:     
 4073:     var require = function (file) {
 4074          return __require(file, "/node_modules/jsonify");
 4075      };
 4076:     
 4077:     require.resolve = function (file) {
 4078          return __require.resolve(name, "/node_modules/jsonify");
 4079      };
 4080:     
 4081:     require.modules = __require.modules;
 4082      __require.modules["/node_modules/jsonify/index.js"]._cached = module.exports;
 4083:     
 4084:     (function () {
 4085          exports.parse = require('./lib/parse');
 4086  exports.stringify = require('./lib/stringify');
 4087  ;
 4088      }).call(module.exports);
 4089:     
 4090:     __require.modules["/node_modules/jsonify/index.js"]._cached = module.exports;
 4091      return module.exports;
 4092  };
 ....
 4097      var __dirname = "/node_modules/jsonify/lib";
 4098      var __filename = "/node_modules/jsonify/lib/parse.js";
 4099:     
 4100:     var require = function (file) {
 4101          return __require(file, "/node_modules/jsonify/lib");
 4102      };
 4103:     
 4104:     require.resolve = function (file) {
 4105          return __require.resolve(name, "/node_modules/jsonify/lib");
 4106      };
 4107:     
 4108:     require.modules = __require.modules;
 4109      __require.modules["/node_modules/jsonify/lib/parse.js"]._cached = module.exports;
 4110:     
 4111:     (function () {
 4112          var at, // The index of the current character
 4113      ch, // The current character
 ....
 4133          };
 4134      },
 4135:     
 4136:     next = function (c) {
 4137          // If a c parameter is provided, verify that it matches the current character.
 4138          if (c && c !== ch) {
 4139              error("Expected '" + c + "' instead of '" + ch + "'");
 4140          }
 4141:         
 4142:         // Get the next character. When there are no more characters,
 4143          // return the empty string.
 4144:         
 4145:         ch = text.charAt(at);
 4146          at += 1;
 4147          return ch;
 4148      },
 4149:     
 4150:     number = function () {
 4151          // Parse a number value.
 4152          var number,
 4153              string = '';
 4154:         
 4155:         if (ch === '-') {
 4156              string = '-';
 4157              next('-');
 ....
 4186          }
 4187      },
 4188:     
 4189:     string = function () {
 4190          // Parse a string value.
 4191          var hex,
 ....
 4193              string = '',
 4194              uffff;
 4195:         
 4196:         // When parsing for string values, we must look for " and \ characters.
 4197          if (ch === '"') {
 4198              while (next()) {
 ....
 4350  module.exports = function (source, reviver) {
 4351      var result;
 4352:     
 4353:     text = source;
 4354      at = 0;
 4355      ch = ' ';
 ....
 4385  ;
 4386      }).call(module.exports);
 4387:     
 4388:     __require.modules["/node_modules/jsonify/lib/parse.js"]._cached = module.exports;
 4389      return module.exports;
 4390  };
 ....
 4395      var __dirname = "/node_modules/jsonify/lib";
 4396      var __filename = "/node_modules/jsonify/lib/stringify.js";
 4397:     
 4398:     var require = function (file) {
 4399          return __require(file, "/node_modules/jsonify/lib");
 4400      };
 4401:     
 4402:     require.resolve = function (file) {
 4403          return __require.resolve(name, "/node_modules/jsonify/lib");
 4404      };
 4405:     
 4406:     require.modules = __require.modules;
 4407      __require.modules["/node_modules/jsonify/lib/stringify.js"]._cached = module.exports;
 4408:     
 4409:     (function () {
 4410          var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
 4411      escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
 ....
 4428      // Otherwise we must also replace the offending characters with safe escape
 4429      // sequences.
 4430:     
 4431:     escapable.lastIndex = 0;
 4432      return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
 4433          var c = meta[a];
 ....
 4446          partial,
 4447          value = holder[key];
 4448:     
 4449:     // If the value has a toJSON method, call it to obtain a replacement value.
 4450      if (value && typeof value === 'object' &&
 4451              typeof value.toJSON === 'function') {
 4452          value = value.toJSON(key);
 4453      }
 4454:     
 4455:     // If we were called with a replacer function, then call the replacer to
 4456      // obtain a replacement value.
 4457      if (typeof rep === 'function') {
 4458          value = rep.call(holder, key, value);
 4459      }
 4460:     
 4461:     // What happens next depends on the value's type.
 4462      switch (typeof value) {
 4463          case 'string':
 4464              return quote(value);
 4465:         
 4466:         case 'number':
 4467              // JSON numbers must be finite. Encode non-finite numbers as null.
 4468              return isFinite(value) ? String(value) : 'null';
 4469:         
 4470:         case 'boolean':
 4471          case 'null':
 4472              // If the value is a boolean or null, convert it to a string. Note:
 ....
 4474              // the remote chance that this gets fixed someday.
 4475              return String(value);
 4476:             
 4477:         case 'object':
 4478              if (!value) return 'null';
 4479              gap += indent;
 4480              partial = [];
 4481:             
 4482:             // Array.isArray
 4483              if (Object.prototype.toString.apply(value) === '[object Array]') {
 4484                  length = value.length;
 ....
 4486                      partial[i] = str(i, value) || 'null';
 4487                  }
 4488:                 
 4489:                 // Join all of the elements together, separated with commas, and
 4490                  // wrap them in brackets.
 4491                  v = partial.length === 0 ? '[]' : gap ?
 ....
 4495                  return v;
 4496              }
 4497:             
 4498:             // If the replacer is an array, use it to select the members to be
 4499              // stringified.
 4500              if (rep && typeof rep === 'object') {
 ....
 4521                  }
 4522              }
 4523:             
 4524:         // Join all of the member texts together, separated with commas,
 4525          // and wrap them in braces.
 4526  
 ....
 4537      gap = '';
 4538      indent = '';
 4539:     
 4540:     // If the space parameter is a number, make an indent string containing that
 4541      // many spaces.
 4542      if (typeof space === 'number') {
 ....
 4557          throw new Error('JSON.stringify');
 4558      }
 4559:     
 4560:     // Make a fake root object containing our value under the key of ''.
 4561      // Return the result of stringifying the value.
 4562      return str('', {'': value});
 ....
 4564  ;
 4565      }).call(module.exports);
 4566:     
 4567:     __require.modules["/node_modules/jsonify/lib/stringify.js"]._cached = module.exports;
 4568      return module.exports;
 4569  };
 ....
 4574      var __dirname = "/node_modules/burrito";
 4575      var __filename = "/node_modules/burrito/index.js";
 4576:     
 4577:     var require = function (file) {
 4578          return __require(file, "/node_modules/burrito");
 4579      };
 4580:     
 4581:     require.resolve = function (file) {
 4582          return __require.resolve(name, "/node_modules/burrito");
 4583      };
 4584:     
 4585:     require.modules = __require.modules;
 4586      __require.modules["/node_modules/burrito/index.js"]._cached = module.exports;
 4587:     
 4588:     (function () {
 4589          var uglify = require('uglify-js');
 4590  var parser = uglify.parser;
 4591  var parse = function (expr) {
 4592      if (typeof expr !== 'string') throw 'expression should be a string';
 4593:     
 4594:     //try {
 4595          var args = [].slice.call(arguments);
 4596          var ast = parser.parse.apply(null, args);
 ....
 4602          || err.pos === undefined
 4603          ) { throw err }
 4604:         
 4605:         var e = new SyntaxError(
 4606              err.message
 4607              + '\n  at line ' + err.line + ':' + err.col + ' in expression:\n\n'
 4608              + '  ' + expr.split(/\r?\n/)[err.line]
 4609          );
 4610:         
 4611:         e.original = err;
 4612          e.line = err.line;
 4613          e.col = err.col;
 ....
 4631          : parse(code.toString(), false, true)
 4632      ;
 4633:     
 4634:     var ast_ = traverse(ast).map(function mapper () {
 4635          wrapNode(this, cb);
 4636      });
 4637:     
 4638:     return deparse(parse(deparse(ast_)), true);
 4639  };
 4640  
 4641  var wrapNode = burrito.wrapNode = function (state, cb) {
 4642      var node = state.node;
 4643:     
 4644:     var ann = Array_isArray(node) && node[0]
 4645      && typeof node[0] === 'object' && node[0].name
 4646          ? node[0]
 4647          : null
 4648      ;
 4649:     
 4650:     if (!ann) return undefined;
 4651:     
 4652:     var self = {
 4653          name : ann.name,
 4654          node : node,
 ....
 4658          state : state
 4659      };
 4660:     
 4661:     self.wrap = function (s) {
 4662          var subsrc = deparse(
 4663              traverse(node).map(function (x) {
 ....
 4665              })
 4666          );
 4667:         
 4668:         if (self.name === 'binary') {
 4669              var a = deparse(traverse(node[2]).map(function (x) {
 4670                  if (!this.isRoot) wrapNode(this, cb)
 ....
 4674              }));
 4675          }
 4676:         
 4677:         var src = '';
 4678:         
 4679:         if (typeof s === 'function') {
 4680              if (self.name === 'binary') {
 4681                  src = s(subsrc, a, b);
 ....
 4691                  })
 4692              ;
 4693:             
 4694:             if (self.name === 'binary') {
 4695                  src = src
 4696                      .replace(/%a/g, function () { return a })
 ....
 4699              }
 4700          }
 4701:         
 4702:         var expr = parse(src);
 4703          state.update(expr, true);
 4704      };
 4705:     
 4706:     var cache = {};
 4707:     
 4708:     self.parent = state.isRoot ? null : function () {
 4709          if (!cache.parent) {
 4710              var s = state;
 ....
 4714                  if (s) x = wrapNode(s);
 4715              } while (s && !x);
 4716:             
 4717:             cache.parent = x;
 4718          }
 4719:         
 4720:         return cache.parent;
 4721      };
 4722:     
 4723:     self.source = function () {
 4724          if (!cache.source) cache.source = deparse(node);
 4725          return cache.source;
 4726      };
 4727:     
 4728:     self.label = function () {
 4729          return burrito.label(self);
 4730      };
 4731:     
 4732:     if (cb) cb.call(state, self);
 4733:     
 4734:     if (self.node[0].name === 'conditional') {
 4735          self.wrap('[%s][0]');
 4736      }
 4737:     
 4738:     return self;
 4739  }
 4740  
 ....
 4742      if (!cb) { cb = context; context = {} };
 4743      if (!context) context = {};
 4744:     
 4745:     var src = burrito(code, cb);
 4746      return vm.runInNewContext(src, context);
 4747  };
 ....
 4751      var lower = '$'.charCodeAt(0);
 4752      var upper = 'z'.charCodeAt(0);
 4753:     
 4754:     while (name.length < len) {
 4755          var c = String.fromCharCode(Math.floor(
 4756              Math.random() * (upper - lower + 1) + lower
 ....
 4758          if ((name + c).match(/^[A-Za-z_$][A-Za-z0-9_$]*$/)) name += c;
 4759      }
 4760:     
 4761:     return name;
 4762  };
 4763  
 ....
 4796  ;
 4797      }).call(module.exports);
 4798:     
 4799:     __require.modules["/node_modules/burrito/index.js"]._cached = module.exports;
 4800      return module.exports;
 4801  };
 ....
 4806      var __dirname = "/";
 4807      var __filename = "//home/substack/projects/node-burrito/example/web";
 4808:     
 4809:     var require = function (file) {
 4810          return __require(file, "/");
 4811      };
 4812      require.modules = __require.modules;
 4813:     
 4814:     var burrito = require('burrito');
 4815  var json = require('jsonify');
 4816  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/index.js:
   52      var acc = [];
   53      this.forEach(function (x) {
   54:         acc.push(this.path); 
   55:     });
   56      return acc;
   57  };
   ..
   67  Traverse.prototype.clone = function () {
   68      var parents = [], nodes = [];
   69:     
   70:     return (function clone (src) {
   71          for (var i = 0; i < parents.length; i++) {
   72              if (parents[i] === src) {
   ..
   74              }
   75          }
   76:         
   77:         if (typeof src === 'object' && src !== null) {
   78              var dst = copy(src);
   79:             
   80:             parents.push(src);
   81              nodes.push(dst);
   82:             
   83:             forEach(Object_keys(src), function (key) {
   84                  dst[key] = clone(src[key]);
   85              });
   86:             
   87:             parents.pop();
   88              nodes.pop();
   89              return dst;
   ..
   99      var parents = [];
  100      var alive = true;
  101:     
  102:     return (function walker (node_) {
  103          var node = immutable ? copy(node_) : node_;
  104          var modifiers = {};
  105:         
  106:         var keepGoing = true;
  107:         
  108:         var state = {
  109              node : node,
  110              node_ : node_,
  ...
  144              block : function () { keepGoing = false }
  145          };
  146:         
  147:         if (!alive) return state;
  148:         
  149:         if (typeof node === 'object' && node !== null) {
  150              state.keys = Object_keys(node);
  151:             
  152:             state.isLeaf = state.keys.length == 0;
  153:             
  154:             for (var i = 0; i < parents.length; i++) {
  155                  if (parents[i].node_ === node_) {
  156                      state.circular = parents[i];
  ...
  162              state.isLeaf = true;
  163          }
  164:         
  165:         state.notLeaf = !state.isLeaf;
  166          state.notRoot = !state.isRoot;
  167:         
  168:         // use return values to update if defined
  169          var ret = cb.call(state, state.node);
  170          if (ret !== undefined && state.update) state.update(ret);
  171:         
  172:         if (modifiers.before) modifiers.before.call(state, state.node);
  173:         
  174:         if (!keepGoing) return state;
  175:         
  176:         if (typeof state.node == 'object'
  177          && state.node !== null && !state.circular) {
  178              parents.push(state);
  179:             
  180:             forEach(state.keys, function (key, i) {
  181                  path.push(key);
  182:                 
  183:                 if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);
  184:                 
  185:                 var child = walker(state.node[key]);
  186                  if (immutable && Object.hasOwnProperty.call(state.node, key)) {
  187                      state.node[key] = child.node;
  188                  }
  189:                 
  190:                 child.isLast = i == state.keys.length - 1;
  191                  child.isFirst = i == 0;
  192:                 
  193:                 if (modifiers.post) modifiers.post.call(state, child);
  194:                 
  195:                 path.pop();
  196              });
  197              parents.pop();
  198          }
  199:         
  200:         if (modifiers.after) modifiers.after.call(state, state.node);
  201:         
  202:         return state;
  203      })(root).node;
  204  }
  ...
  207      if (typeof src === 'object' && src !== null) {
  208          var dst;
  209:         
  210:         if (Array_isArray(src)) {
  211              dst = [];
  212          }
  ...
  233              if (!dst.__proto__) dst.__proto__ = proto;
  234          }
  235:         
  236:         forEach(Object_keys(src), function (key) {
  237              dst[key] = src[key];
  238          });

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/circular.js:
   23      var obj = { x : [ 1, 2, 3 ], y : [ 4, 5 ] };
   24      obj.y[2] = obj;
   25:     
   26:     var times = 0;
   27      Traverse(obj).forEach(function (x) {
   28          if (this.circular) {
   ..
   32          }
   33      });
   34:     
   35:     assert.deepEqual(times, 1);
   36  };
   37  
   ..
   40      obj.y[2] = obj;
   41      obj.x.push(obj.y);
   42:     
   43:     var circs = [];
   44      Traverse(obj).forEach(function (x) {
   45          if (this.circular) {
   ..
   47          }
   48      });
   49:     
   50:     assert.deepEqual(circs[0].self.path, [ 'x', 3, 2 ]);
   51      assert.deepEqual(circs[0].circ.path, []);
   52:      
   53:     assert.deepEqual(circs[1].self.path, [ 'y', 2 ]);
   54      assert.deepEqual(circs[1].circ.path, []);
   55:     
   56:     assert.deepEqual(circs.length, 2);
   57  };
   58  
   ..
   61      obj.y[2] = obj;
   62      obj.x.push(obj.y);
   63:     
   64:     Traverse(obj).forEach(function (x) {
   65          if (this.circular) this.update('...');
   66      });
   67:     
   68:     assert.deepEqual(obj, { x : [ 1, 2, 3, [ 4, 5, '...' ] ], y : [ 4, 5, '...' ] });
   69  };
   70  
   ..
   73      obj.y[2] = obj;
   74      obj.x.push(obj.y);
   75:     
   76:     var c = Traverse(obj).map(function (x) {
   77          if (this.circular) {
   78              this.update('...');
   79          }
   80      });
   81:     
   82:     assert.deepEqual(c, { x : [ 1, 2, 3, [ 4, 5, '...' ] ], y : [ 4, 5, '...' ] });
   83  };
   84  
   ..
   87      obj.y[2] = obj;
   88      obj.x.push(obj.y);
   89:     
   90:     var clone = Traverse.clone(obj);
   91      assert.ok(obj !== clone);
   92:     
   93:     assert.ok(clone.y[2] === clone);
   94      assert.ok(clone.y[2] !== obj);
   95      assert.ok(clone.x[3][2] === clone);
   ..
  102      var obj = { a : 1, b : 2 };
  103      obj.c = obj;
  104:     
  105:     var scrubbed = Traverse(obj).map(function (node) {
  106          if (this.circular) this.remove();
  107      });
  ...
  111      );
  112      assert.ok(deepEqual(scrubbed, { a : 1, b : 2 }));
  113:     
  114:     assert.equal(obj.c, obj);
  115  };
  116  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/date.js:
    4  exports.dateEach = function () {
    5      var obj = { x : new Date, y : 10, z : 5 };
    6:     
    7:     var counts = {};
    8:     
    9:     Traverse(obj).forEach(function (node) {
   10          var t = (node instanceof Date && 'Date') || typeof node;
   11          counts[t] = (counts[t] || 0) + 1;
   12      });
   13:     
   14:     assert.deepEqual(counts, {
   15          object : 1,
   16          Date : 1,
   ..
   21  exports.dateMap = function () {
   22      var obj = { x : new Date, y : 10, z : 5 };
   23:     
   24:     var res = Traverse(obj).map(function (node) {
   25          if (typeof node === 'number') this.update(node + 100);
   26      });
   27:     
   28:     assert.ok(obj.x !== res.x);
   29      assert.deepEqual(res, {
   30          x : obj.x,

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/equal.js:
   11          'dates should be equal'
   12      );
   13:     
   14:     var d0 = new Date;
   15      setTimeout(function () {
   16          assert.ok(
   ..
   27      var a = [1];
   28      a.push(a); // a = [ 1, *a ]
   29:     
   30:     var b = [1];
   31      b.push(a); // b = [ 1, [ 1, *a ] ]
   32:     
   33:     assert.ok(
   34          !deepEqual(a, b),
   35          'circular ref mount points count towards equality'
   36      );
   37:     
   38:     var c = [1];
   39      c.push(c); // c = [ 1, *c ]
   40      assert.ok(
   ..
   42          'circular refs are structurally the same here'
   43      );
   44:     
   45:     var d = [1];
   46      d.push(a); // c = [ 1, [ 1, *d ] ]
   47      assert.ok(
   ..
   56          'boolean instances are not real booleans'
   57      );
   58:     
   59:     assert.ok(
   60          !deepEqual([ new String('x') ], [ 'x' ]),
   61          'string instances are not real strings'
   62      );
   63:     
   64:     assert.ok(
   65          !deepEqual([ new Number(4) ], [ 4 ]),
   66          'number instances are not real numbers'
   67      );
   68:     
   69:     assert.ok(
   70          deepEqual([ new RegExp('x') ], [ /x/ ]),
   71          'regexp instances are real regexps'
   72      );
   73:     
   74:     assert.ok(
   75          !deepEqual([ new RegExp(/./) ], [ /../ ]),
   76          'these regexps aren\'t the same'
   77      );
   78:     
   79:     assert.ok(
   80          !deepEqual(
   81              [ function (x) { return x * 2 } ],
   ..
   84          'functions with the same .toString() aren\'t necessarily the same'
   85      );
   86:     
   87:     var f = function (x) { return x * 2 };
   88      assert.ok(
   89          deepEqual([ f ], [ f ]),
   ..
  104          'null is not undefined!'
  105      );
  106:     
  107:     assert.ok(
  108          !deepEqual([ null ], [ undefined ]),
  109          'undefined is not null!'
  110      );
  111:     
  112:     assert.ok(
  113          !deepEqual(
  114              { a : 1, b : 2, c : [ 3, undefined, 5 ] },
  ...
  117          'undefined is not null, however deeply!'
  118      );
  119:     
  120:     assert.ok(
  121          !deepEqual(
  122              { a : 1, b : 2, c : [ 3, undefined, 5 ] },
  ...
  125          'null is not undefined, however deeply!'
  126      );
  127:     
  128:     assert.ok(
  129          !deepEqual(
  130              { a : 1, b : 2, c : [ 3, undefined, 5 ] },
  ...
  138      var xs = [ 1, 2, 3, 4 ];
  139      delete xs[2];
  140:     
  141:     var ys = Object.create(Array.prototype);
  142      ys[0] = 1;
  143      ys[1] = 2;
  144      ys[3] = 4;
  145:     
  146:     assert.ok(
  147          deepEqual(xs, ys),
  148          'arrays with deleted elements are only equal to'
  149          + ' arrays with similarly deleted elements'
  150      );
  151:     
  152:     assert.ok(
  153          !deepEqual(xs, [ 1, 2, undefined, 4 ]),
  154          'deleted array elements cannot be undefined'
  155      );
  156:     
  157:     assert.ok(
  158          !deepEqual(xs, [ 1, 2, null, 4 ]),
  159          'deleted array elements cannot be null'
  ...
  164      var obj = { a : 1, b : 2, c : 3 };
  165      delete obj.c;
  166:     
  167:     assert.ok(
  168          deepEqual(obj, { a : 1, b : 2 }),
  169          'deleted object elements should not show up'
  170      );
  171:     
  172:     assert.ok(
  173          !deepEqual(obj, { a : 1, b : 2, c : undefined }),
  174          'deleted object elements are not undefined'
  175      );
  176:     
  177:     assert.ok(
  178          !deepEqual(obj, { a : 1, b : 2, c : null }),
  179          'deleted object elements are not null'
  ...
  195          'arguments are not arrays'
  196      );
  197:     
  198:     assert.ok(
  199          deepEqual(
  200              (function () { return arguments })(4, 5, 6),

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/instance.js:
    4  
    5  exports['check instanceof on node elems'] = function () {
    6:     
    7:     var counts = { emitter : 0 };
    8:     
    9:     Traverse([ new EventEmitter, 3, 4, { ev : new EventEmitter }])
   10          .forEach(function (node) {
   11              if (node instanceof EventEmitter) counts.emitter ++;
   12          })
   13      ;
   14:     
   15:     assert.equal(counts.emitter, 2);
   16  };
   17  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/interface.js:
    4  exports['interface map'] = function () {
    5      var obj = { a : [ 5,6,7 ], b : { c : [8] } };
    6:     
    7:     assert.deepEqual(
    8          Traverse.paths(obj)
    9              .sort()
   ..
   14           'a a/0 a/1 a/2 b b/c b/c/0'
   15      );
   16:     
   17:     assert.deepEqual(
   18          Traverse.nodes(obj),
   19          [
   ..
   23          ]
   24      );
   25:     
   26:     assert.deepEqual(
   27          Traverse.map(obj, function (node) {
   28              if (typeof node == 'number') {
   ..
   35          { a: '5 6 7', b: { c: '8' } }
   36      );
   37:     
   38:     var nodes = 0;
   39      Traverse.forEach(obj, function (node) { nodes ++ });
   40      assert.deepEqual(nodes, 8);

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/json.js:
    6      var callbacks = {};
    7      var obj = { moo : function () {}, foo : [2,3,4, function () {}] };
    8:     
    9:     var scrubbed = Traverse(obj).map(function (x) {
   10          if (typeof x === 'function') {
   11              callbacks[id] = { id : id, f : x, path : this.path };
   ..
   14          }
   15      });
   16:     
   17:     assert.equal(
   18          scrubbed.moo, '[Function]',
   19          'obj.moo replaced with "[Function]"'
   20      );
   21:     
   22:     assert.equal(
   23          scrubbed.foo[3], '[Function]',
   24          'obj.foo[3] replaced with "[Function]"'
   25      );
   26:     
   27:     assert.deepEqual(scrubbed, {
   28          moo : '[Function]',
   29          foo : [ 2, 3, 4, "[Function]" ]
   30      }, 'Full JSON string matches');
   31:     
   32:     assert.deepEqual(
   33          typeof obj.moo, 'function',
   34          'Original obj.moo still a function'
   35      );
   36:     
   37:     assert.deepEqual(
   38          typeof obj.foo[3], 'function',
   39          'Original obj.foo[3] still a function'
   40      );
   41:     
   42:     assert.deepEqual(callbacks, {
   43          54: { id: 54, f : obj.moo, path: [ 'moo' ] },
   44          55: { id: 55, f : obj.foo[3], path: [ 'foo', '3' ] },

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/keys.js:
   21          if (this.isLeaf) acc.push(node);
   22      });
   23:     
   24:     assert.equal(
   25          acc.join(' '),
   26          '9 30 22',

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/leaves.js:
   12          if (this.isLeaf) acc.push(x);
   13      });
   14:     
   15:     assert.equal(
   16          acc.join(' '),
   17          '1 2 3 4 5 6 7 8 9',

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/mutability.js:
   94          if (this.isLeaf && x % 2 == 0) this.remove();
   95      });
   96:     
   97:     assert.deepEqual(obj, { a : 1, c : [ 3 ] });
   98  };
   99  
  100  exports.removeNoStop = function() {
  101      var obj = { a : 1, b : 2, c : { d: 3, e: 4 }, f: 5 };
  102:     
  103:     var keys = [];
  104      Traverse(obj).forEach(function (x) {
  105          keys.push(this.key)
  ...
  112  exports.removeStop = function() {
  113      var obj = { a : 1, b : 2, c : { d: 3, e: 4 }, f: 5 };
  114:     
  115:     var keys = [];
  116      Traverse(obj).forEach(function (x) {
  117          keys.push(this.key)
  ...
  127          if (this.isLeaf && x % 2 == 0) this.remove();
  128      });
  129:     
  130:     assert.deepEqual(obj, { a : 1, b : 2, c : [ 3, 4 ] });
  131      assert.deepEqual(res, { a : 1, c : [ 3 ] });
  132  };
  ...
  137          if (this.isLeaf && x % 2 == 0) this.delete();
  138      });
  139:     
  140:     assert.ok(!deepEqual(
  141          obj, { a : 1, c : [ 3, undefined ] }
  142      ));
  143:     
  144:     assert.ok(deepEqual(
  145          obj, { a : 1, c : [ 3 ] }
  146      ));
  147:     
  148:     assert.ok(!deepEqual(
  149          obj, { a : 1, c : [ 3, null ] }
  150      ));
  ...
  153  exports.deleteNoStop = function() {
  154      var obj = { a : 1, b : 2, c : { d: 3, e: 4 } };
  155:     
  156:     var keys = [];
  157      Traverse(obj).forEach(function (x) {
  158          keys.push(this.key)
  ...
  165  exports.deleteStop = function() {
  166      var obj = { a : 1, b : 2, c : { d: 3, e: 4 } };
  167:     
  168:     var keys = [];
  169      Traverse(obj).forEach(function (x) {
  170          keys.push(this.key)
  ...
  180          if (this.isLeaf && x % 2 == 0) this.delete();
  181      });
  182:     
  183:     assert.ok(!deepEqual(
  184          obj, { a : 1, c : [ 3, undefined, 5 ] }
  185      ));
  186:     
  187:     assert.ok(deepEqual(
  188          obj, { a : 1, c : [ 3 ,, 5 ] }
  189      ));
  190:     
  191:     assert.ok(!deepEqual(
  192          obj, { a : 1, c : [ 3, null, 5 ] }
  193      ));
  194:     
  195:     assert.ok(!deepEqual(
  196          obj, { a : 1, c : [ 3, 5 ] }
  197      ));
  ...
  203          if (this.isLeaf && x % 2 == 0) this.delete();
  204      });
  205:     
  206:     assert.ok(deepEqual(
  207          obj,
  208          { a : 1, b : 2, c : [ 3, 4 ] }
  209      ));
  210:     
  211:     var xs = [ 3, 4 ];
  212      delete xs[1];
  213:     
  214:     assert.ok(deepEqual(
  215          res, { a : 1, c : xs }
  216      ));
  217:     
  218:     assert.ok(deepEqual(
  219          res, { a : 1, c : [ 3, ] }
  220      ));
  221:     
  222:     assert.ok(deepEqual(
  223          res, { a : 1, c : [ 3 ] }
  224      ));
  ...
  230          if (this.isLeaf && x % 2 == 0) this.delete();
  231      });
  232:     
  233:     assert.ok(deepEqual(
  234          obj,
  235          { a : 1, b : 2, c : [ 3, 4, 5 ] }
  236      ));
  237:     
  238:     var xs = [ 3, 4, 5 ];
  239      delete xs[1];
  240:     
  241:     assert.ok(deepEqual(
  242          res, { a : 1, c : xs }
  243      ));
  244:     
  245:     assert.ok(!deepEqual(
  246          res, { a : 1, c : [ 3, 5 ] }
  247      ));
  248:     
  249:     assert.ok(deepEqual(
  250          res, { a : 1, c : [ 3 ,, 5 ] }
  251      ));

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/negative.js:
    7          if (x < 0) this.update(x + 128);
    8      });
    9:     
   10:     assert.deepEqual(fixed,
   11          [ 5, 6, 125, [ 7, 8, 126, 1 ], { f: 10, g: 115 } ],
   12          'Negative values += 128'
   13      );
   14:     
   15:     assert.deepEqual(obj,
   16          [ 5, 6, -3, [ 7, 8, -2, 1 ], { f: 10, g: -13 } ],
   17          'Original references not modified'

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/obj.js:
    6          assert.fail('never ran');
    7      }, 1000);
    8:     
    9:     function Cons (x) {
   10          clearTimeout(to);
   11          assert.equal(x, 10);

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/siblings.js:
    4  exports.siblings = function () {
    5      var obj = { a : 1, b : 2, c : [ 4, 5, 6 ] };
    6:     
    7:     var res = traverse(obj).reduce(function (acc, x) {
    8          var p = '/' + this.path.join('/');
    9          if (this.parent) {
   ..
   23          return acc;
   24      }, {});
   25:     
   26:     assert.deepEqual(res, {
   27          '/' : { siblings : [], key : undefined, index : -1 },
   28          '/a' : { siblings : [ 'a', 'b', 'c' ], key : 'a', index : 0 },

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/stop.js:
   10          }
   11      });
   12:     
   13:     assert.equal(visits, 5);
   14  };
   15  
   ..
   21          }
   22      }).join('');
   23:     
   24:     assert.equal(s, 'ABCDEfghij');
   25  };
   26  
   ..
   37          return acc;
   38      }, []);
   39:     
   40:     assert.deepEqual(xs, [ 4, 5, 6 ]);
   41  };
   42  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/stringify.js:
    4  exports.stringify = function () {
    5      var obj = [ 5, 6, -3, [ 7, 8, -2, 1 ], { f : 10, g : -13 } ];
    6:     
    7:     var s = '';
    8      Traverse(obj).forEach(function (node) {
    9          if (Array.isArray(node)) {
   ..
   31          }
   32      });
   33:     
   34:     assert.equal(s, JSON.stringify(obj));
   35  }
   36  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/subexpr.js:
    9          }
   10      });
   11:     
   12:     assert.deepEqual(obj, [ 'a', 4, 'b', 5, 'c', 6 ]);
   13      assert.deepEqual(r, [
   14          'a', [ 3.9, 4, 4.1 ],
   ..
   26          }
   27      });
   28:     
   29:     assert.deepEqual(r, [
   30          [ [ [ [ [ 5 ] ] ] ] ],
   31          [ [ [ [ 5 ] ] ] ],

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/super_deep.js:
    8      var a1 = make();
    9      assert.ok(deepEqual(a0, a1));
   10:     
   11:     a0.c.d.moo = true;
   12      assert.ok(!deepEqual(a0, a1));
   13:     
   14:     a1.c.d.moo = true;
   15      assert.ok(deepEqual(a0, a1));
   16:     
   17:     // TODO: this one
   18      //a0.c.a = a1;
   19      //assert.ok(!deepEqual(a0, a1));
   ..
   26      var d = { self : 'd' };
   27      var e = { self : 'e' };
   28:     
   29:     a.a = a;
   30      a.b = b;
   31      a.c = c;
   32:     
   33:     b.a = a;
   34      b.b = b;
   35      b.c = c;
   36:     
   37:     c.a = a;
   38      c.b = b;
   39      c.c = c;
   40      c.d = d;
   41:     
   42:     d.a = a;
   43      d.b = b;
   44      d.c = c;
   45      d.d = d;
   46      d.e = e;
   47:     
   48:     e.a = a;
   49      e.b = b;
   50      e.c = c;
   51      e.d = d;
   52      e.e = e;
   53:     
   54:     return a;
   55  }
   56  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/test/lib/deep_equal.js:
    7          );
    8      }
    9:     
   10:     var equal = true;
   11      var node = b;
   12:     
   13:     traverse(a).forEach(function (y) {
   14          var notEqual = (function () {
   15              equal = false;
   ..
   17              return undefined;
   18          }).bind(this);
   19:         
   20:         //if (node === undefined || node === null) return notEqual();
   21:         
   22:         if (!this.isRoot) {
   23          /*
   24              if (!Object.hasOwnProperty.call(node, this.key)) {
   ..
   29              node = node[this.key];
   30          }
   31:         
   32:         var x = node;
   33:         
   34:         this.post(function () {
   35              node = x;
   36          });
   37:         
   38:         var toS = function (o) {
   39              return Object.prototype.toString.call(o);
   40          };
   41:         
   42:         if (this.circular) {
   43              if (traverse(b).get(this.circular.path) !== x) notEqual();
   44          }
   ..
   88          }
   89      });
   90:     
   91:     return equal;
   92  };
   93  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/uglify-js/tmp/hoist.js:
   15  
   16          function test() {
   17:                 
   18:         };
   19  
   20          //test();

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/test/ast.js:
    5  test('ast', function (t) {
    6      t.plan(2);
    7:     
    8:     var ast = burrito.parse('f(g(h(5)))', false, true);
    9      var src = burrito(ast, function (node) {
   10          if (node.name === 'call') {
   ..
   14          }
   15      });
   16:     
   17:     var times = 0;
   18      t.equal(
   19          vm.runInNewContext(src, {

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/test/err.js:
    4  test('wrap error', function (t) {
    5      t.plan(6);
    6:     
    7:     try {
    8          var src = burrito('f() && g()', function (node) {
    9              if (node.name === 'binary') node.wrap('h(%a, %b')
   ..
   23  test('non string', function (t) {
   24      t.plan(3);
   25:     
   26:     t.throws(function () {
   27          burrito.parse(new Buffer('[]'));
   28      });
   29:     
   30:     t.throws(function () {
   31          burrito.parse(new String('[]'));
   32      });
   33:     
   34:     t.throws(function () {
   35          burrito.parse();
   36      });

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/test/label.js:
    4  test('call label', function (t) {
    5      t.plan(1);
    6:     
    7:     burrito('foo(10)', function (node) {
    8          if (node.name === 'call') {
    9              t.equal(node.label(), 'foo');
   ..
   14  test('var label', function (t) {
   15      t.plan(1);
   16:     
   17:     burrito('var x = 2', function (node) {
   18          if (node.name === 'var') {
   19              t.same(node.label(), [ 'x' ]);
   ..
   24  test('vars label', function (t) {
   25      t.plan(1);
   26:     
   27:     burrito('var x = 2, y = 3', function (node) {
   28          if (node.name === 'var') {
   29              t.same(node.label(), [ 'x', 'y' ]);
   ..
   34  test('defun label', function (t) {
   35      t.plan(1);
   36:     
   37:     burrito('function moo () {}', function (node) {
   38          if (node.name === 'defun') {
   39              t.same(node.label(), 'moo');
   ..
   44  test('function label', function (t) {
   45      t.plan(1);
   46:     
   47:     burrito('(function zzz () {})()', function (node) {
   48          if (node.name === 'function') {
   49              t.same(node.label(), 'zzz');
   ..
   54  test('anon function label', function (t) {
   55      t.plan(1);
   56:     
   57:     burrito('(function () {})()', function (node) {
   58          if (node.name === 'function') {
   59              t.equal(node.label(), null);
   ..
   64  test('dot call label', function (t) {
   65      t.plan(1);
   66:     
   67:     burrito('process.nextTick(fn)', function (node) {
   68          if (node.name === 'call') {
   69              t.equal(node.label(), 'nextTick');
   ..
   74  test('triple dot label', function (t) {
   75      t.plan(1);
   76:     
   77:     burrito('a.b.c(fn)', function (node) {
   78          if (node.name === 'call') {
   79              t.equal(node.label(), 'c');
   ..
   84  test('expr label', function (t) {
   85      t.plan(1);
   86:     
   87:     burrito('a.b[x+1](fn)', function (node) {
   88          if (node.name === 'call') {
   89              t.ok(node.label() === null);

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/test/microwave.js:
    4  test('microwave', function (t) {
    5      t.plan(4);
    6:     
    7:     var context = {
    8          f : function (x) { return x + 1 },
    9          g : function (x) { return x + 2 },
   ..
   14          },
   15      };
   16:     
   17:     var res = burrito.microwave('f(g(h(5)))', context, function (node) {
   18          if (node.name === 'call') {
   19              node.wrap(function (s) {
   ..
   22          }
   23      });
   24:     
   25:     t.equal(res, (((((5 + 3) * 10) + 2) * 10) + 1) * 10);
   26  });
   27  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/test/parent.js:
    5      t.plan(5);
    6      var src = 'Math.tan(0) + Math.sin(0)';
    7:     
    8:     var res = burrito.microwave(src, function (node) {
    9          if (node.name === 'binary') {
   10              node.wrap('%a - %b');
   ..
   12          else if (node.name === 'num') {
   13              t.equal(node.parent().value[0][0], 'dot');
   14:             
   15:             var fn = node.parent().value[0][2];
   16              if (fn === 'sin') {
   17                  node.wrap('Math.PI / 2');
   ..
   23          }
   24      });
   25:     
   26:     t.equal(res, Math.tan(Math.PI / 4) - Math.sin(Math.PI / 2)); // ~ 0
   27  });
   28  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/test/wrap.js:
    8          // do nothing. we just want to check that ternary parens are persisted
    9      });
   10:     
   11:     var ctxt = {
   12          x : false,
   13          y : 'y_'+~~(Math.random()*10),
   14          z : 'z_'+~~(Math.random()*10)
   15      };
   16:     
   17:     var expectedOutput = vm.runInNewContext(originalSource, ctxt);
   18      var burritoOutput = vm.runInNewContext(burritoSource, ctxt);
   19:     
   20:     t.equal(burritoOutput, expectedOutput);
   21:     
   22:     ctxt.x = true;
   23:     
   24:     expectedOutput = vm.runInNewContext(originalSource, ctxt);
   25      burritoOutput = vm.runInNewContext(burritoSource, ctxt);
   26:     
   27:     t.equal(burritoOutput, expectedOutput);
   28      t.end();
   29  });
   ..
   37          t.equal(this, node.state);
   38      });
   39:     
   40:     var times = { bbb : 0, qqq : 0 };
   41:     
   42:     var res = [];
   43      vm.runInNewContext(src, {
   44          bbb : function (x) {
   ..
   60          foo : function () { return 'foo!' },
   61      });
   62:     
   63:     t.same(res, [
   64          true, // f()
   65          7, // h()
   ..
   81          }
   82      });
   83:     
   84:     var times = 0;
   85      t.equal(
   86          vm.runInNewContext(src, {
   ..
  106          z : function (n) { return n * 10 },
  107      };
  108:     
  109:     var res = burrito.microwave(src, context, function (node) {
  110          if (node.name === 'binary') {
  111              node.wrap('%a*2 - %b*2');
  112          }
  113      });
  114:     
  115:     t.equal(res, 10 * (3*2 - 4*2));
  116      t.end();
  117  });
  ...
  124          z : function (n) { return n * 10 },
  125      };
  126:     
  127:     var res = burrito.microwave(src, context, function (node) {
  128          if (node.name === 'binary') {
  129              node.wrap(function (expr, a, b) {
  ...
  132          }
  133      });
  134:     
  135:     t.equal(res, 10 * (3*2 - 4*2));
  136      t.end();
  137  });
  ...
  142          g();
  143      }).toString() + ')()';
  144:     
  145:     var times = { f : 0, g : 0, zzz : 0 };
  146:     
  147:     var context = {
  148          f : function () { times.f ++ },
  149          g : function () { times.g ++ },
  150          zzz : function () { times.zzz ++ },
  151      };
  152:     
  153:     burrito.microwave(src, context, function (node) {
  154          if (node.name === 'stat') node.wrap('{ zzz(); %s }');
  155      });
  156:     
  157:     t.same(times, { f : 1, g : 1, zzz : 3 });
  158      t.end();
  159  });

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/test/fail/src.js:
   28            recurse(path.join(dir, this_dir), function(err, data) {
   29              if(++total >= dirs.length)
   30:               recurse_files() 
   31:           })
   32          })
   33  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/test/cover.js:
   10  test('cover', function (t) {
   11      t.plan(1);
   12:     
   13:     var b = bunker(src['cover.js']);
   14      var counts = {};
   15:     
   16:     b.on('node', function (node) {
   17          counts[node.name] = (counts[node.name] || 0) + 1;
   18      });
   19:     
   20:     b.run({
   21          setInterval : setInterval,
   22          clearInterval : function () {
   ..
   30                  });
   31              });
   32:             
   33:             return clearInterval.apply(this, arguments);
   34          },
   35      });

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/test/return.js:
    4  test('cover', function (t) {
    5      t.plan(1);
    6:     
    7:     var b = bunker('(' + function () {
    8          function foo () {}
    9          function bar () {}
   10:         
   11:         (function () {
   12              return foo();
   13          })();
   14      } + ')()');
   15      var counts = {};
   16:     
   17:     b.on('node', function (node) {
   18          counts[node.name] = (counts[node.name] || 0) + 1;
   19      });
   20      b.run();
   21:     
   22:     process.nextTick(function () {
   23          t.same(counts, {
   24              stat : 2,

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/test/interface.js:
   17      assert.equal(Object.keys(coverageData)[0], __dirname + '/src/coverage.js');
   18  
   19:     var fileCoverageData = coverageData[Object.keys(coverageData)[0]]; 
   20: 
   21      assert.ok(fileCoverageData.stats);
   22      assert.ok(fileCoverageData.missing);
   ..
   46  
   47      coverage.release();
   48:     assert.equal(require.extensions['.js'], originalRequire); 
   49:   });
   50  };
   51  

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/slide/lib/async-map-ordered.js:
   63    // res = [[er, x, y], [er, x1, y1], [er, x2, y2, z2]]
   64    // return [[x, x1, x2], [y, y1, y2], [undefined, undefined, z2]]
   65:   
   66: 

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/node_modules/slide/lib/bind-actor.js:
    1  module.exports = bindActor
    2  function bindActor () {
    3:   var args = 
    4:         Array.prototype.slice.call
    5          (arguments) // jswtf.
    6      , obj = null

/Users/andris/Projects/mailparser/node_modules/nodeunit/node_modules/tap/test/deep.js:
   23      , "bar"
   24      , 11
   25:     , { baz: 
   26:         { d : 4
   27          , a: 1
   28          , b: 2
   29          , c: 3 } } ]
   30:   , [ { foo : 
   31:         { z: 100
   32          , y: 200
   33          , x: 300 } }
   34      , "bar"
   35      , 11
   36:     , { baz: 
   37:         { a: 1
   38          , b: 2
   39          , c: 3

/Users/andris/Projects/mailparser/node_modules/nodeunit/test/test-httputil.js:
    5  
    6      test.expect(6);
    7:     
    8:     httputil(function (req, resp) {
    9          test.equal(req.method, 'PUT');
   10          test.equal(req.url, '/newpair');
   11          test.equal(req.headers.foo, 'bar');
   12:         
   13:         resp.writeHead(500, {'content-type': 'text/plain'});
   14          resp.end('failed');
   15      }, function (server, client) {
   ..
   17              test.equal(resp.statusCode, 500);
   18              test.equal(resp.headers['content-type'], 'text/plain');
   19:             test.equal(resp.body, 'failed');            
   20:               
   21:             server.close();
   22              test.done();
   23          });
   ..
   28  
   29      test.expect(9);
   30:     
   31:     httputil(function (req, resp) {
   32          test.equal(req.method, 'GET');
   33          test.equal(req.url, '/');
   34          test.equal(req.headers.foo, 'bar');
   35:         
   36:         var testdata = {foo1: 'bar', foo2: 'baz'};
   37:         
   38:         resp.writeHead(200, {'content-type': 'application/json'});
   39          resp.end(JSON.stringify(testdata));
   40:         
   41:     }, function (server, client) {
   42          client.fetch('GET', '/', {'foo': 'bar'}, function (resp) {
   43              test.equal(resp.statusCode, 200);
   44              test.equal(resp.headers['content-type'], 'application/json');
   45:             
   46:             test.ok(resp.bodyAsObject);
   47              test.equal(typeof resp.bodyAsObject, 'object');
   48              test.equal(resp.bodyAsObject.foo1, 'bar');
   49              test.equal(resp.bodyAsObject.foo2, 'baz');
   50:             
   51:             server.close();
   52              test.done();
   53          });

/Users/andris/Projects/mailparser/test/windowsfail.js:
   12                        "vcU=",
   13          mail = new Buffer(encodedText, "utf-8");
   14:     
   15:     var mailparser = new MailParser();
   16      mailparser.end(mail);
   17      mailparser.on("end", function(mail){
   ..
   19          test.equal(mail.text.trim(), "신");
   20          test.done();
   21:     }); 
   22: }

1011 matches across 94 files
